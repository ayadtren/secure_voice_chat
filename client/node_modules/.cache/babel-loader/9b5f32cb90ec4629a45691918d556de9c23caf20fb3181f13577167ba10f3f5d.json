{"ast":null,"code":"var _jsxFileName = \"/Users/ayadyousifshahi/Documents/webchat app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport './App.css';\nimport UserList from './components/UserList';\nimport AudioControls from './components/AudioControls';\nimport ConnectionStatus from './components/ConnectionStatus';\nimport Login from './components/Login';\nimport { WebRTCManager } from './utils/webrtcManager';\nimport QRCodeGenerator from './components/QRCodeGenerator';\nimport QRCodeScanner from './components/QRCodeScanner';\nimport { Button } from './components/ui/button';\n\n// Configuration\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || window.location.origin;\nfunction App() {\n  _s();\n  // State\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [users, setUsers] = useState([]);\n  const [currentCall, setCurrentCall] = useState(null);\n  const [callStatus, setCallStatus] = useState('idle'); // idle, calling, connected\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const [networkQuality, setNetworkQuality] = useState(100); // 0-100\n  const [darkMode, setDarkMode] = useState(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [showQRScanner, setShowQRScanner] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [peerSpeaking, setPeerSpeaking] = useState(false);\n  const [webrtcManager, setWebrtcManager] = useState(null);\n\n  // Refs\n  const localStream = useRef(null);\n  const localAudioRef = useRef(null);\n  const remoteAudioRef = useRef(null);\n\n  // Cleanup local audio stream\n  const cleanupLocalStream = () => {\n    if (localStream.current) {\n      const tracks = localStream.current.getTracks();\n      tracks.forEach(track => track.stop());\n      localStream.current = null;\n    }\n    if (localAudioRef.current) {\n      localAudioRef.current.srcObject = null;\n    }\n  };\n\n  // Handle call end (cleanup)\n  const handleCallEnd = useCallback(() => {\n    if (webrtcManager) {\n      webrtcManager.dispose();\n      setWebrtcManager(null);\n    }\n    cleanupLocalStream();\n    setCurrentCall(null);\n    setCallStatus('idle');\n    setNetworkQuality(100);\n    setIsSpeaking(false);\n    setPeerSpeaking(false);\n  }, [webrtcManager]);\n\n  // Initialize socket connection\n  useEffect(() => {\n    const newSocket = io(SERVER_URL, {\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000\n    });\n    setSocket(newSocket);\n\n    // Socket event listeners\n    newSocket.on('connect', () => {\n      console.log('Connected to server');\n      setConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setConnected(false);\n      handleCallEnd();\n    });\n    newSocket.on('error', error => {\n      console.error('Socket error:', error);\n      alert(`Error: ${error.message}`);\n    });\n    newSocket.on('userList', userList => {\n      setUsers(userList.filter(user => user.id !== newSocket.id));\n    });\n    newSocket.on('registered', data => {\n      console.log('Registered as:', data.username);\n      setUsername(data.username);\n    });\n\n    // WebRTC signaling events\n    newSocket.on('offer', async ({\n      from,\n      offer\n    }) => {\n      console.log('Received offer from:', from);\n\n      // If already in a call, reject\n      if (callStatus !== 'idle') {\n        newSocket.emit('busy', {\n          target: from\n        });\n        return;\n      }\n\n      // Get caller info\n      const caller = users.find(user => user.id === from);\n      if (!caller) return;\n\n      // Ask user to accept call\n      const accept = window.confirm(`Incoming call from ${caller.username}. Accept?`);\n      if (!accept) {\n        newSocket.emit('reject', {\n          target: from\n        });\n        return;\n      }\n      try {\n        // Setup WebRTC connection using enhanced manager\n        const manager = new WebRTCManager(newSocket, {\n          userId: newSocket.id,\n          onPeerConnect: (peerId, stream) => {\n            if (remoteAudioRef.current && stream) {\n              remoteAudioRef.current.srcObject = stream;\n            }\n            setCallStatus('connected');\n          },\n          onPeerDisconnect: () => {\n            handleCallEnd();\n          },\n          onSpeakingChange: speaking => {\n            setIsSpeaking(speaking);\n          },\n          onAudioQualityChange: (peerId, quality) => {\n            setNetworkQuality(Math.round(quality));\n          },\n          onError: error => {\n            console.error('WebRTC error:', error);\n            alert(`WebRTC error: ${error}`);\n          }\n        });\n        setWebrtcManager(manager);\n\n        // Initialize and accept the call\n        await manager.initialize(from);\n        await manager.acceptIncomingCall(from, offer);\n        setCurrentCall(caller);\n        setCallStatus('connected');\n      } catch (error) {\n        console.error('Error accepting call:', error);\n        alert('Failed to accept call. Please try again.');\n      }\n    });\n    newSocket.on('answer', async ({\n      from,\n      answer\n    }) => {\n      console.log('Received answer from:', from);\n      if (!webrtcManager || callStatus !== 'calling') return;\n      try {\n        await webrtcManager.handleAnswer(from, answer);\n        console.log('Remote description set successfully');\n        setCallStatus('connected');\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n        handleCallEnd();\n      }\n    });\n    newSocket.on('iceCandidate', async ({\n      from,\n      candidate\n    }) => {\n      console.log('Received ICE candidate from:', from);\n      if (!webrtcManager) return;\n      try {\n        await webrtcManager.addIceCandidate(from, candidate);\n        console.log('Added ICE candidate successfully');\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n    newSocket.on('speaking', ({\n      userId,\n      speaking\n    }) => {\n      if (currentCall && userId === currentCall.id) {\n        setPeerSpeaking(speaking);\n      }\n    });\n    newSocket.on('reject', () => {\n      alert('Call was rejected');\n      handleCallEnd();\n    });\n    newSocket.on('busy', () => {\n      alert('User is busy');\n      handleCallEnd();\n    });\n    newSocket.on('callEnded', () => {\n      alert('Call ended by the other user');\n      handleCallEnd();\n    });\n\n    // Cleanup on unmount\n    return () => {\n      if (newSocket) {\n        newSocket.disconnect();\n      }\n      cleanupLocalStream();\n      if (webrtcManager) {\n        webrtcManager.dispose();\n      }\n    };\n  }, [callStatus, currentCall, handleCallEnd, users, webrtcManager]);\n\n  // Handle dark mode preference changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => setDarkMode(e.matches);\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  // Apply dark mode class to body\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  // Handle user registration\n  const handleLogin = async username => {\n    if (!socket || !connected) {\n      alert('Not connected to server');\n      return;\n    }\n    socket.emit('register', {\n      username\n    });\n  };\n\n  // Start a call with a user\n  const startCall = async targetUser => {\n    if (callStatus !== 'idle') return;\n    try {\n      // Create new WebRTC manager\n      const manager = new WebRTCManager(socket, {\n        userId: socket.id,\n        onPeerConnect: (peerId, stream) => {\n          if (remoteAudioRef.current && stream) {\n            remoteAudioRef.current.srcObject = stream;\n          }\n          setCallStatus('connected');\n        },\n        onPeerDisconnect: () => {\n          handleCallEnd();\n        },\n        onSpeakingChange: speaking => {\n          setIsSpeaking(speaking);\n        },\n        onAudioQualityChange: (peerId, quality) => {\n          setNetworkQuality(Math.round(quality));\n        },\n        onError: error => {\n          console.error('WebRTC error:', error);\n          alert(`WebRTC error: ${error}`);\n        }\n      });\n      setWebrtcManager(manager);\n\n      // Initialize and start the call\n      await manager.initialize(targetUser.id);\n      await manager.startCall(targetUser.id);\n      setCurrentCall(targetUser);\n      setCallStatus('calling');\n    } catch (error) {\n      console.error('Error starting call:', error);\n      alert('Failed to start call. Please try again.');\n      handleCallEnd();\n    }\n  };\n\n  // End the current call\n  const endCall = () => {\n    if (!socket || !currentCall) return;\n    socket.emit('callEnded', {\n      target: currentCall.id\n    });\n    handleCallEnd();\n  };\n\n  // Toggle microphone\n  const toggleMicrophone = () => {\n    if (webrtcManager) {\n      const enabled = webrtcManager.toggleMicrophone();\n      setAudioEnabled(enabled);\n    } else if (localStream.current) {\n      const audioTrack = localStream.current.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        setAudioEnabled(audioTrack.enabled);\n      }\n    }\n  };\n\n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  // Handle QR code scan result\n  const handleQRScan = data => {\n    try {\n      const connectionData = JSON.parse(data);\n      if (connectionData.roomId && connectionData.userId) {\n        // Start call with scanned user\n        const user = {\n          id: connectionData.userId,\n          username: connectionData.username || 'User via QR'\n        };\n        startCall(user);\n        setShowQRScanner(false);\n      }\n    } catch (error) {\n      console.error('Invalid QR code data:', error);\n      alert('Invalid QR code. Please try again.');\n    }\n  };\n\n  // Generate QR code data\n  const getQRCodeData = () => {\n    return JSON.stringify({\n      roomId: socket === null || socket === void 0 ? void 0 : socket.id,\n      userId: socket === null || socket === void 0 ? void 0 : socket.id,\n      username: username\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${darkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Secure Voice Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-toggle\",\n        onClick: toggleDarkMode,\n        \"aria-label\": darkMode ? 'Switch to light mode' : 'Switch to dark mode',\n        children: darkMode ? '☀️' : '🌙'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-content\",\n      children: !username ? /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: handleLogin,\n        connected: connected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connected: connected,\n          callStatus: callStatus,\n          currentCall: currentCall,\n          networkQuality: networkQuality,\n          isSpeaking: isSpeaking,\n          peerSpeaking: peerSpeaking\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), callStatus === 'idle' ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connection-options\",\n          children: [/*#__PURE__*/_jsxDEV(UserList, {\n            users: users,\n            onCallUser: startCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qr-options\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setShowQRCode(!showQRCode),\n              variant: \"outline\",\n              children: showQRCode ? 'Hide QR Code' : 'Show QR Code'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => setShowQRScanner(!showQRScanner),\n              variant: \"outline\",\n              children: showQRScanner ? 'Hide QR Scanner' : 'Scan QR Code'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), showQRCode && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qr-container\",\n              children: /*#__PURE__*/_jsxDEV(QRCodeGenerator, {\n                data: getQRCodeData(),\n                size: 200,\n                title: \"Scan to connect with me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 21\n            }, this), showQRScanner && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qr-container\",\n              children: /*#__PURE__*/_jsxDEV(QRCodeScanner, {\n                onScan: handleQRScan,\n                onError: error => console.error('QR scan error:', error),\n                onClose: () => setShowQRScanner(false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"call-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: callStatus === 'calling' ? `Calling ${currentCall === null || currentCall === void 0 ? void 0 : currentCall.username}...` : `In call with ${currentCall === null || currentCall === void 0 ? void 0 : currentCall.username}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speaking-indicators\",\n            children: [isSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"speaking-indicator you\",\n              children: \"You are speaking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 34\n            }, this), peerSpeaking && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"speaking-indicator peer\",\n              children: [currentCall === null || currentCall === void 0 ? void 0 : currentCall.username, \" is speaking\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n            audioEnabled: audioEnabled,\n            onToggleMicrophone: toggleMicrophone,\n            onEndCall: endCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"End-to-end encrypted \\u2022 Zero persistence \\u2022 Local network only\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: localAudioRef,\n      muted: true,\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: remoteAudioRef,\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AyT1ZqGE9CehRE31S/VJRGdCCUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","io","UserList","AudioControls","ConnectionStatus","Login","WebRTCManager","QRCodeGenerator","QRCodeScanner","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","SERVER_URL","process","env","REACT_APP_SERVER_URL","window","location","origin","App","_s","socket","setSocket","connected","setConnected","username","setUsername","users","setUsers","currentCall","setCurrentCall","callStatus","setCallStatus","audioEnabled","setAudioEnabled","networkQuality","setNetworkQuality","darkMode","setDarkMode","matchMedia","matches","showQRCode","setShowQRCode","showQRScanner","setShowQRScanner","isSpeaking","setIsSpeaking","peerSpeaking","setPeerSpeaking","webrtcManager","setWebrtcManager","localStream","localAudioRef","remoteAudioRef","cleanupLocalStream","current","tracks","getTracks","forEach","track","stop","srcObject","handleCallEnd","dispose","newSocket","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","on","console","log","error","alert","message","userList","filter","user","id","data","from","offer","emit","target","caller","find","accept","confirm","manager","userId","onPeerConnect","peerId","stream","onPeerDisconnect","onSpeakingChange","speaking","onAudioQualityChange","quality","Math","round","onError","initialize","acceptIncomingCall","answer","handleAnswer","candidate","addIceCandidate","disconnect","mediaQuery","handleChange","e","addEventListener","removeEventListener","document","body","classList","add","remove","handleLogin","startCall","targetUser","endCall","toggleMicrophone","enabled","audioTrack","getAudioTracks","toggleDarkMode","handleQRScan","connectionData","JSON","parse","roomId","getQRCodeData","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onLogin","onCallUser","variant","size","title","onScan","onClose","onToggleMicrophone","onEndCall","ref","muted","autoPlay","playsInline","_c","$RefreshReg$"],"sources":["/Users/ayadyousifshahi/Documents/webchat app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport './App.css';\nimport UserList from './components/UserList';\nimport AudioControls from './components/AudioControls';\nimport ConnectionStatus from './components/ConnectionStatus';\nimport Login from './components/Login';\nimport { WebRTCManager } from './utils/webrtcManager';\nimport QRCodeGenerator from './components/QRCodeGenerator';\nimport QRCodeScanner from './components/QRCodeScanner';\nimport { Button } from './components/ui/button';\n\n// Configuration\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || window.location.origin;\n\nfunction App() {\n  // State\n  const [socket, setSocket] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n  const [users, setUsers] = useState([]);\n  const [currentCall, setCurrentCall] = useState(null);\n  const [callStatus, setCallStatus] = useState('idle'); // idle, calling, connected\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const [networkQuality, setNetworkQuality] = useState(100); // 0-100\n  const [darkMode, setDarkMode] = useState(\n    window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n  );\n  const [showQRCode, setShowQRCode] = useState(false);\n  const [showQRScanner, setShowQRScanner] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [peerSpeaking, setPeerSpeaking] = useState(false);\n  const [webrtcManager, setWebrtcManager] = useState(null);\n  \n  // Refs\n  const localStream = useRef(null);\n  const localAudioRef = useRef(null);\n  const remoteAudioRef = useRef(null);\n  \n  // Cleanup local audio stream\n  const cleanupLocalStream = () => {\n    if (localStream.current) {\n      const tracks = localStream.current.getTracks();\n      tracks.forEach(track => track.stop());\n      localStream.current = null;\n    }\n    \n    if (localAudioRef.current) {\n      localAudioRef.current.srcObject = null;\n    }\n  };\n  \n  // Handle call end (cleanup)\n  const handleCallEnd = useCallback(() => {\n    if (webrtcManager) {\n      webrtcManager.dispose();\n      setWebrtcManager(null);\n    }\n    \n    cleanupLocalStream();\n    \n    setCurrentCall(null);\n    setCallStatus('idle');\n    setNetworkQuality(100);\n    setIsSpeaking(false);\n    setPeerSpeaking(false);\n  }, [webrtcManager]);\n  \n  // Initialize socket connection\n  useEffect(() => {\n    const newSocket = io(SERVER_URL, {\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000,\n    });\n    \n    setSocket(newSocket);\n    \n    // Socket event listeners\n    newSocket.on('connect', () => {\n      console.log('Connected to server');\n      setConnected(true);\n    });\n    \n    newSocket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setConnected(false);\n      handleCallEnd();\n    });\n    \n    newSocket.on('error', (error) => {\n      console.error('Socket error:', error);\n      alert(`Error: ${error.message}`);\n    });\n    \n    newSocket.on('userList', (userList) => {\n      setUsers(userList.filter(user => user.id !== newSocket.id));\n    });\n    \n    newSocket.on('registered', (data) => {\n      console.log('Registered as:', data.username);\n      setUsername(data.username);\n    });\n    \n    // WebRTC signaling events\n    newSocket.on('offer', async ({ from, offer }) => {\n      console.log('Received offer from:', from);\n      \n      // If already in a call, reject\n      if (callStatus !== 'idle') {\n        newSocket.emit('busy', { target: from });\n        return;\n      }\n      \n      // Get caller info\n      const caller = users.find(user => user.id === from);\n      if (!caller) return;\n      \n      // Ask user to accept call\n      const accept = window.confirm(`Incoming call from ${caller.username}. Accept?`);\n      if (!accept) {\n        newSocket.emit('reject', { target: from });\n        return;\n      }\n      \n      try {\n        // Setup WebRTC connection using enhanced manager\n        const manager = new WebRTCManager(newSocket, {\n          userId: newSocket.id,\n          onPeerConnect: (peerId, stream) => {\n            if (remoteAudioRef.current && stream) {\n              remoteAudioRef.current.srcObject = stream;\n            }\n            setCallStatus('connected');\n          },\n          onPeerDisconnect: () => {\n            handleCallEnd();\n          },\n          onSpeakingChange: (speaking) => {\n            setIsSpeaking(speaking);\n          },\n          onAudioQualityChange: (peerId, quality) => {\n            setNetworkQuality(Math.round(quality));\n          },\n          onError: (error) => {\n            console.error('WebRTC error:', error);\n            alert(`WebRTC error: ${error}`);\n          }\n        });\n        \n        setWebrtcManager(manager);\n        \n        // Initialize and accept the call\n        await manager.initialize(from);\n        await manager.acceptIncomingCall(from, offer);\n        \n        setCurrentCall(caller);\n        setCallStatus('connected');\n        \n      } catch (error) {\n        console.error('Error accepting call:', error);\n        alert('Failed to accept call. Please try again.');\n      }\n    });\n    \n    newSocket.on('answer', async ({ from, answer }) => {\n      console.log('Received answer from:', from);\n      \n      if (!webrtcManager || callStatus !== 'calling') return;\n      \n      try {\n        await webrtcManager.handleAnswer(from, answer);\n        console.log('Remote description set successfully');\n        setCallStatus('connected');\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n        handleCallEnd();\n      }\n    });\n    \n    newSocket.on('iceCandidate', async ({ from, candidate }) => {\n      console.log('Received ICE candidate from:', from);\n      \n      if (!webrtcManager) return;\n      \n      try {\n        await webrtcManager.addIceCandidate(from, candidate);\n        console.log('Added ICE candidate successfully');\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n    \n    newSocket.on('speaking', ({ userId, speaking }) => {\n      if (currentCall && userId === currentCall.id) {\n        setPeerSpeaking(speaking);\n      }\n    });\n    \n    newSocket.on('reject', () => {\n      alert('Call was rejected');\n      handleCallEnd();\n    });\n    \n    newSocket.on('busy', () => {\n      alert('User is busy');\n      handleCallEnd();\n    });\n    \n    newSocket.on('callEnded', () => {\n      alert('Call ended by the other user');\n      handleCallEnd();\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      if (newSocket) {\n        newSocket.disconnect();\n      }\n      cleanupLocalStream();\n      if (webrtcManager) {\n        webrtcManager.dispose();\n      }\n    };\n  }, [callStatus, currentCall, handleCallEnd, users, webrtcManager]);\n  \n  // Handle dark mode preference changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e) => setDarkMode(e.matches);\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  \n  // Apply dark mode class to body\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n  \n  // Handle user registration\n  const handleLogin = async (username) => {\n    if (!socket || !connected) {\n      alert('Not connected to server');\n      return;\n    }\n    \n    socket.emit('register', { username });\n  };\n  \n  // Start a call with a user\n  const startCall = async (targetUser) => {\n    if (callStatus !== 'idle') return;\n    \n    try {\n      // Create new WebRTC manager\n      const manager = new WebRTCManager(socket, {\n        userId: socket.id,\n        onPeerConnect: (peerId, stream) => {\n          if (remoteAudioRef.current && stream) {\n            remoteAudioRef.current.srcObject = stream;\n          }\n          setCallStatus('connected');\n        },\n        onPeerDisconnect: () => {\n          handleCallEnd();\n        },\n        onSpeakingChange: (speaking) => {\n          setIsSpeaking(speaking);\n        },\n        onAudioQualityChange: (peerId, quality) => {\n          setNetworkQuality(Math.round(quality));\n        },\n        onError: (error) => {\n          console.error('WebRTC error:', error);\n          alert(`WebRTC error: ${error}`);\n        }\n      });\n      \n      setWebrtcManager(manager);\n      \n      // Initialize and start the call\n      await manager.initialize(targetUser.id);\n      await manager.startCall(targetUser.id);\n      \n      setCurrentCall(targetUser);\n      setCallStatus('calling');\n      \n    } catch (error) {\n      console.error('Error starting call:', error);\n      alert('Failed to start call. Please try again.');\n      handleCallEnd();\n    }\n  };\n  \n  // End the current call\n  const endCall = () => {\n    if (!socket || !currentCall) return;\n    \n    socket.emit('callEnded', { target: currentCall.id });\n    handleCallEnd();\n  };\n  \n  // Toggle microphone\n  const toggleMicrophone = () => {\n    if (webrtcManager) {\n      const enabled = webrtcManager.toggleMicrophone();\n      setAudioEnabled(enabled);\n    } else if (localStream.current) {\n      const audioTrack = localStream.current.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        setAudioEnabled(audioTrack.enabled);\n      }\n    }\n  };\n  \n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  \n  // Handle QR code scan result\n  const handleQRScan = (data) => {\n    try {\n      const connectionData = JSON.parse(data);\n      if (connectionData.roomId && connectionData.userId) {\n        // Start call with scanned user\n        const user = {\n          id: connectionData.userId,\n          username: connectionData.username || 'User via QR'\n        };\n        startCall(user);\n        setShowQRScanner(false);\n      }\n    } catch (error) {\n      console.error('Invalid QR code data:', error);\n      alert('Invalid QR code. Please try again.');\n    }\n  };\n  \n  // Generate QR code data\n  const getQRCodeData = () => {\n    return JSON.stringify({\n      roomId: socket?.id,\n      userId: socket?.id,\n      username: username\n    });\n  };\n  \n  return (\n    <div className={`app ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <header className=\"app-header\">\n        <h1>Secure Voice Chat</h1>\n        <button \n          className=\"theme-toggle\" \n          onClick={toggleDarkMode} \n          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\n        >\n          {darkMode ? '☀️' : '🌙'}\n        </button>\n      </header>\n      \n      <main className=\"app-content\">\n        {!username ? (\n          <Login onLogin={handleLogin} connected={connected} />\n        ) : (\n          <>\n            <ConnectionStatus \n              connected={connected} \n              callStatus={callStatus} \n              currentCall={currentCall}\n              networkQuality={networkQuality}\n              isSpeaking={isSpeaking}\n              peerSpeaking={peerSpeaking}\n            />\n            \n            {callStatus === 'idle' ? (\n              <div className=\"connection-options\">\n                <UserList \n                  users={users} \n                  onCallUser={startCall} \n                />\n                \n                <div className=\"qr-options\">\n                  <Button \n                    onClick={() => setShowQRCode(!showQRCode)}\n                    variant=\"outline\"\n                  >\n                    {showQRCode ? 'Hide QR Code' : 'Show QR Code'}\n                  </Button>\n                  \n                  <Button \n                    onClick={() => setShowQRScanner(!showQRScanner)}\n                    variant=\"outline\"\n                  >\n                    {showQRScanner ? 'Hide QR Scanner' : 'Scan QR Code'}\n                  </Button>\n                  \n                  {showQRCode && (\n                    <div className=\"qr-container\">\n                      <QRCodeGenerator \n                        data={getQRCodeData()} \n                        size={200}\n                        title=\"Scan to connect with me\"\n                      />\n                    </div>\n                  )}\n                  \n                  {showQRScanner && (\n                    <div className=\"qr-container\">\n                      <QRCodeScanner \n                        onScan={handleQRScan}\n                        onError={(error) => console.error('QR scan error:', error)}\n                        onClose={() => setShowQRScanner(false)}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"call-container\">\n                <h2>\n                  {callStatus === 'calling' \n                    ? `Calling ${currentCall?.username}...` \n                    : `In call with ${currentCall?.username}`}\n                </h2>\n                \n                <div className=\"speaking-indicators\">\n                  {isSpeaking && <div className=\"speaking-indicator you\">You are speaking</div>}\n                  {peerSpeaking && <div className=\"speaking-indicator peer\">{currentCall?.username} is speaking</div>}\n                </div>\n                \n                <AudioControls \n                  audioEnabled={audioEnabled} \n                  onToggleMicrophone={toggleMicrophone} \n                  onEndCall={endCall} \n                />\n              </div>\n            )}\n          </>\n        )}\n      </main>\n      \n      <footer className=\"app-footer\">\n        <p>End-to-end encrypted • Zero persistence • Local network only</p>\n      </footer>\n      \n      {/* Hidden audio elements */}\n      <audio ref={localAudioRef} muted autoPlay playsInline />\n      <audio ref={remoteAudioRef} autoPlay playsInline />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}