{"ast":null,"code":"/**\n * Resource Cleanup Helper\n * \n * Provides utilities for properly cleaning up WebRTC resources\n */\n\n/**\n * Clean up WebRTC resources\n * @param {WebRTCManager} manager - WebRTC manager instance\n */\nexport const cleanupWebRTCResources = manager => {\n  if (!manager) return;\n\n  // Stop all local streams\n  stopAllStreams(manager.localStream);\n  stopAllStreams(manager.localVideoStream);\n  stopAllStreams(manager.localScreenStream);\n\n  // Close all peer connections\n  if (manager.peerConnections) {\n    for (const [_, peerConnection] of manager.peerConnections.entries()) {\n      closeConnection(peerConnection);\n    }\n    manager.peerConnections.clear();\n  }\n\n  // Clear audio quality monitors\n  if (manager.audioQualityMonitors) {\n    manager.audioQualityMonitors.clear();\n  }\n\n  // Reset WebRTC manager state\n  manager.localStream = null;\n  manager.localVideoStream = null;\n  manager.localScreenStream = null;\n  manager.isScreenSharing = false;\n};\n\n/**\n * Stop all tracks in a media stream\n * @param {MediaStream} stream - Media stream to stop\n */\nexport const stopAllStreams = stream => {\n  if (!stream) return;\n\n  // Stop all tracks in the stream\n  stream.getTracks().forEach(track => {\n    track.stop();\n  });\n};\n\n/**\n * Close a peer connection\n * @param {RTCPeerConnection} connection - Peer connection to close\n */\nexport const closeConnection = connection => {\n  if (!connection) return;\n  try {\n    // Close the connection\n    connection.close();\n\n    // Remove all event listeners\n    connection.onicecandidate = null;\n    connection.oniceconnectionstatechange = null;\n    connection.ontrack = null;\n    connection.onnegotiationneeded = null;\n  } catch (error) {\n    console.error('Error closing connection:', error);\n  }\n};\n\n/**\n * Clean up recording resources\n * @param {RecordingHelper} recordingHelper - Recording helper instance\n */\nexport const cleanupRecordingResources = recordingHelper => {\n  if (!recordingHelper) return;\n\n  // Stop recording if active\n  if (recordingHelper.isCurrentlyRecording()) {\n    recordingHelper.stopRecording().catch(console.error);\n  }\n};\nexport default {\n  cleanupWebRTCResources,\n  stopAllStreams,\n  closeConnection,\n  cleanupRecordingResources\n};","map":{"version":3,"names":["cleanupWebRTCResources","manager","stopAllStreams","localStream","localVideoStream","localScreenStream","peerConnections","_","peerConnection","entries","closeConnection","clear","audioQualityMonitors","isScreenSharing","stream","getTracks","forEach","track","stop","connection","close","onicecandidate","oniceconnectionstatechange","ontrack","onnegotiationneeded","error","console","cleanupRecordingResources","recordingHelper","isCurrentlyRecording","stopRecording","catch"],"sources":["/Users/ayadyousifshahi/Documents/webchat app/client/src/utils/resourceCleanupHelper.js"],"sourcesContent":["/**\n * Resource Cleanup Helper\n * \n * Provides utilities for properly cleaning up WebRTC resources\n */\n\n/**\n * Clean up WebRTC resources\n * @param {WebRTCManager} manager - WebRTC manager instance\n */\nexport const cleanupWebRTCResources = (manager) => {\n  if (!manager) return;\n  \n  // Stop all local streams\n  stopAllStreams(manager.localStream);\n  stopAllStreams(manager.localVideoStream);\n  stopAllStreams(manager.localScreenStream);\n  \n  // Close all peer connections\n  if (manager.peerConnections) {\n    for (const [_, peerConnection] of manager.peerConnections.entries()) {\n      closeConnection(peerConnection);\n    }\n    manager.peerConnections.clear();\n  }\n  \n  // Clear audio quality monitors\n  if (manager.audioQualityMonitors) {\n    manager.audioQualityMonitors.clear();\n  }\n  \n  // Reset WebRTC manager state\n  manager.localStream = null;\n  manager.localVideoStream = null;\n  manager.localScreenStream = null;\n  manager.isScreenSharing = false;\n};\n\n/**\n * Stop all tracks in a media stream\n * @param {MediaStream} stream - Media stream to stop\n */\nexport const stopAllStreams = (stream) => {\n  if (!stream) return;\n  \n  // Stop all tracks in the stream\n  stream.getTracks().forEach(track => {\n    track.stop();\n  });\n};\n\n/**\n * Close a peer connection\n * @param {RTCPeerConnection} connection - Peer connection to close\n */\nexport const closeConnection = (connection) => {\n  if (!connection) return;\n  \n  try {\n    // Close the connection\n    connection.close();\n    \n    // Remove all event listeners\n    connection.onicecandidate = null;\n    connection.oniceconnectionstatechange = null;\n    connection.ontrack = null;\n    connection.onnegotiationneeded = null;\n  } catch (error) {\n    console.error('Error closing connection:', error);\n  }\n};\n\n/**\n * Clean up recording resources\n * @param {RecordingHelper} recordingHelper - Recording helper instance\n */\nexport const cleanupRecordingResources = (recordingHelper) => {\n  if (!recordingHelper) return;\n  \n  // Stop recording if active\n  if (recordingHelper.isCurrentlyRecording()) {\n    recordingHelper.stopRecording().catch(console.error);\n  }\n};\n\nexport default {\n  cleanupWebRTCResources,\n  stopAllStreams,\n  closeConnection,\n  cleanupRecordingResources\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,sBAAsB,GAAIC,OAAO,IAAK;EACjD,IAAI,CAACA,OAAO,EAAE;;EAEd;EACAC,cAAc,CAACD,OAAO,CAACE,WAAW,CAAC;EACnCD,cAAc,CAACD,OAAO,CAACG,gBAAgB,CAAC;EACxCF,cAAc,CAACD,OAAO,CAACI,iBAAiB,CAAC;;EAEzC;EACA,IAAIJ,OAAO,CAACK,eAAe,EAAE;IAC3B,KAAK,MAAM,CAACC,CAAC,EAAEC,cAAc,CAAC,IAAIP,OAAO,CAACK,eAAe,CAACG,OAAO,CAAC,CAAC,EAAE;MACnEC,eAAe,CAACF,cAAc,CAAC;IACjC;IACAP,OAAO,CAACK,eAAe,CAACK,KAAK,CAAC,CAAC;EACjC;;EAEA;EACA,IAAIV,OAAO,CAACW,oBAAoB,EAAE;IAChCX,OAAO,CAACW,oBAAoB,CAACD,KAAK,CAAC,CAAC;EACtC;;EAEA;EACAV,OAAO,CAACE,WAAW,GAAG,IAAI;EAC1BF,OAAO,CAACG,gBAAgB,GAAG,IAAI;EAC/BH,OAAO,CAACI,iBAAiB,GAAG,IAAI;EAChCJ,OAAO,CAACY,eAAe,GAAG,KAAK;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMX,cAAc,GAAIY,MAAM,IAAK;EACxC,IAAI,CAACA,MAAM,EAAE;;EAEb;EACAA,MAAM,CAACC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAI;IAClCA,KAAK,CAACC,IAAI,CAAC,CAAC;EACd,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMR,eAAe,GAAIS,UAAU,IAAK;EAC7C,IAAI,CAACA,UAAU,EAAE;EAEjB,IAAI;IACF;IACAA,UAAU,CAACC,KAAK,CAAC,CAAC;;IAElB;IACAD,UAAU,CAACE,cAAc,GAAG,IAAI;IAChCF,UAAU,CAACG,0BAA0B,GAAG,IAAI;IAC5CH,UAAU,CAACI,OAAO,GAAG,IAAI;IACzBJ,UAAU,CAACK,mBAAmB,GAAG,IAAI;EACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,yBAAyB,GAAIC,eAAe,IAAK;EAC5D,IAAI,CAACA,eAAe,EAAE;;EAEtB;EACA,IAAIA,eAAe,CAACC,oBAAoB,CAAC,CAAC,EAAE;IAC1CD,eAAe,CAACE,aAAa,CAAC,CAAC,CAACC,KAAK,CAACL,OAAO,CAACD,KAAK,CAAC;EACtD;AACF,CAAC;AAED,eAAe;EACbzB,sBAAsB;EACtBE,cAAc;EACdQ,eAAe;EACfiB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}