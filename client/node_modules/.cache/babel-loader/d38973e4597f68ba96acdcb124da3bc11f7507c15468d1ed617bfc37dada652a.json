{"ast":null,"code":"var _jsxFileName = \"/Users/ayadyousifshahi/Documents/webchat app/client/src/components/VideoChatRoom.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { WebRTCManager } from '../utils/webrtcManager';\nimport { clsx } from 'clsx';\nimport { cn } from '../lib/utils';\nimport QRCodeGenerator from './QRCodeGenerator';\nimport VideoContainer from './VideoContainer';\nimport VideoControls from './VideoControls';\nimport CameraPermissionGuide from './CameraPermissionGuide';\nimport VideoQualityControls from './VideoQualityControls';\nimport NetworkQualityIndicator from './NetworkQualityIndicator';\nimport ScreenShareButton from './ScreenShareButton';\nimport RecordButton from './RecordButton';\nimport RecordingHelper from './../utils/recordingHelper';\nimport { getOptimalLayout, addOrientationChangeListener } from './../utils/responsiveHelper';\nimport { cleanupWebRTCResources, cleanupRecordingResources } from './../utils/resourceCleanupHelper';\n\n/**\n * VideoChatRoom Component\n * \n * Main component for the video/voice chat room functionality.\n * Handles WebRTC connections, audio/video processing, and UI for the chat.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoChatRoom = ({\n  roomId,\n  userId,\n  onLeave\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [webrtcManager, setWebrtcManager] = useState(null);\n  const [connectedPeers, setConnectedPeers] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [peerSpeaking, setPeerSpeaking] = useState({});\n  const [audioLevels, setAudioLevels] = useState({});\n  const [connectionQualities, setConnectionQualities] = useState({});\n  const [error, setError] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [showQRCode, setShowQRCode] = useState(false);\n\n  // Video-related state\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [cameraStatus, setCameraStatus] = useState(null);\n  const [localVideoStream, setLocalVideoStream] = useState(null);\n  const [remoteVideoStreams, setRemoteVideoStreams] = useState({});\n\n  // Phase 2 features - Video quality and network monitoring\n  const [currentVideoQuality, setCurrentVideoQuality] = useState('high');\n  const [networkQuality, setNetworkQuality] = useState(100);\n  const [networkMetrics, setNetworkMetrics] = useState(null);\n\n  // Phase 3 features - Screen sharing\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenStream, setScreenStream] = useState(null);\n\n  // Phase 3 features - Recording\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n\n  // Layout state for responsive design\n  const [layout, setLayout] = useState(getOptimalLayout());\n\n  // References\n  const audioRefs = useRef({});\n  const animationFrameRef = useRef(null);\n  const webrtcManagerRef = useRef(null);\n  const recordingHelperRef = useRef(null);\n\n  // Initialize socket and WebRTC manager\n  useEffect(() => {\n    // Create socket connection to signaling server\n    const newSocket = io(process.env.REACT_APP_SIGNALING_SERVER || window.location.origin, {\n      path: '/socket.io',\n      transports: ['websocket'],\n      secure: window.location.protocol === 'https:',\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    setSocket(newSocket);\n\n    // Socket event handlers\n    newSocket.on('connect', () => {\n      console.log('Connected to signaling server');\n    });\n    newSocket.on('connect_error', err => {\n      console.error('Connection error:', err);\n      setError('Failed to connect to the signaling server. Please try again.');\n    });\n\n    // Clean up on unmount\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Handle device orientation changes\n  useEffect(() => {\n    const removeListener = addOrientationChangeListener(() => {\n      setLayout(getOptimalLayout());\n    });\n    return () => {\n      removeListener();\n    };\n  }, []);\n\n  // Initialize WebRTC manager when socket is ready\n  useEffect(() => {\n    if (!socket || !roomId) return;\n    const manager = new WebRTCManager(socket, {\n      userId,\n      onPeerConnect: handlePeerConnect,\n      onPeerDisconnect: handlePeerDisconnect,\n      onSpeakingChange: handleSpeakingChange,\n      onAudioQualityChange: handleAudioQualityChange,\n      onError: errorMsg => setError(errorMsg),\n      onMicrophoneStatus: handleMicrophoneStatus,\n      onCameraStatus: handleCameraStatus,\n      onLocalVideo: handleLocalVideo,\n      onRemoteVideo: handleRemoteVideo,\n      onVideoStatusChange: handleVideoStatusChange,\n      onNetworkQualityChange: handleNetworkQualityChange,\n      // Phase 2 - Network quality monitoring\n      onScreenSharingChange: handleScreenSharingChange // Phase 3 - Screen sharing\n    });\n    setWebrtcManager(manager);\n    webrtcManagerRef.current = manager;\n\n    // Initialize WebRTC and join room\n    manager.initialize(roomId).then(() => {\n      setIsConnecting(false);\n      startAudioLevelMonitoring(manager);\n\n      // Get available video devices\n      manager.getVideoDevices().then(devices => {\n        setVideoDevices(devices);\n      });\n\n      // Set initial video quality (Phase 2)\n      if (manager.setVideoQuality) {\n        manager.setVideoQuality(currentVideoQuality);\n      }\n\n      // Initialize recording helper (Phase 3)\n      recordingHelperRef.current = new RecordingHelper();\n    }).catch(err => {\n      console.error('Failed to initialize WebRTC:', err);\n      setError('Failed to initialize video chat. Please try again.');\n    });\n\n    // Clean up on unmount\n    return () => {\n      if (manager) {\n        manager.dispose();\n      }\n    };\n  }, [socket, roomId, userId, currentVideoQuality]);\n\n  // Handle peer connect\n  const handlePeerConnect = peerId => {\n    setConnectedPeers(prev => [...prev, peerId]);\n  };\n\n  // Handle peer disconnect\n  const handlePeerDisconnect = peerId => {\n    setConnectedPeers(prev => prev.filter(id => id !== peerId));\n\n    // Remove peer speaking status\n    setPeerSpeaking(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[peerId];\n      return newState;\n    });\n\n    // Remove peer audio level\n    setAudioLevels(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[peerId];\n      return newState;\n    });\n\n    // Remove peer video stream\n    setRemoteVideoStreams(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[peerId];\n      return newState;\n    });\n\n    // Remove peer connection quality\n    setConnectionQualities(prev => {\n      const newState = {\n        ...prev\n      };\n      delete newState[peerId];\n      return newState;\n    });\n  };\n\n  // Handle speaking change\n  const handleSpeakingChange = speaking => {\n    setIsSpeaking(speaking);\n  };\n\n  // Handle peer speaking change\n  const handlePeerSpeakingChange = (peerId, speaking) => {\n    setPeerSpeaking(prev => ({\n      ...prev,\n      [peerId]: speaking\n    }));\n  };\n\n  // Handle audio quality change\n  const handleAudioQualityChange = quality => {\n    // Update audio quality\n  };\n\n  // Handle microphone status\n  const handleMicrophoneStatus = status => {\n    // Update microphone status\n  };\n\n  // Handle camera status\n  const handleCameraStatus = status => {\n    setCameraStatus(status);\n  };\n\n  // Handle local video\n  const handleLocalVideo = stream => {\n    setLocalVideoStream(stream);\n    setIsVideoEnabled(!!stream);\n  };\n\n  // Handle remote video\n  const handleRemoteVideo = (peerId, stream) => {\n    setRemoteVideoStreams(prev => ({\n      ...prev,\n      [peerId]: stream\n    }));\n  };\n\n  // Handle video status change\n  const handleVideoStatusChange = enabled => {\n    setIsVideoEnabled(enabled);\n  };\n\n  // Handle network quality change (Phase 2)\n  const handleNetworkQualityChange = (quality, metrics) => {\n    setNetworkQuality(quality);\n    setNetworkMetrics(metrics);\n\n    // Update connection quality for the peer\n    setConnectionQualities(prev => ({\n      ...prev,\n      local: quality\n    }));\n  };\n\n  // Handle video quality change (Phase 2)\n  const handleVideoQualityChange = qualityPreset => {\n    if (webrtcManager && webrtcManager.setVideoQuality) {\n      webrtcManager.setVideoQuality(qualityPreset.id);\n      setCurrentVideoQuality(qualityPreset.id);\n    }\n  };\n\n  // Start monitoring audio levels\n  const startAudioLevelMonitoring = manager => {\n    const updateAudioLevels = () => {\n      if (!manager) return;\n\n      // Update local audio level\n      const localLevel = manager.getAudioLevel();\n      setAudioLevels(prevLevels => ({\n        ...prevLevels,\n        local: localLevel\n      }));\n\n      // Continue monitoring\n      animationFrameRef.current = requestAnimationFrame(updateAudioLevels);\n    };\n\n    // Start monitoring\n    updateAudioLevels();\n  };\n\n  // Toggle mute\n  const handleToggleMute = () => {\n    if (webrtcManager) {\n      const newMuteState = webrtcManager.toggleMute();\n      setIsMuted(newMuteState);\n    }\n  };\n\n  // Toggle video\n  const handleToggleVideo = async () => {\n    if (webrtcManager) {\n      const videoEnabled = await webrtcManager.toggleVideo();\n      setIsVideoEnabled(videoEnabled);\n    }\n  };\n\n  // Switch camera\n  const handleSwitchCamera = async deviceId => {\n    if (webrtcManager) {\n      await webrtcManager.switchCamera(deviceId);\n    }\n  };\n\n  // Retry camera access\n  const handleRetryCameraAccess = async () => {\n    if (webrtcManager) {\n      const videoEnabled = await webrtcManager.toggleVideo();\n      setIsVideoEnabled(videoEnabled);\n    }\n  };\n\n  // Leave room\n  const handleLeaveRoom = () => {\n    // Clean up WebRTC resources\n    if (webrtcManagerRef.current) {\n      cleanupWebRTCResources(webrtcManagerRef.current);\n    }\n\n    // Clean up recording resources\n    if (recordingHelperRef.current) {\n      cleanupRecordingResources(recordingHelperRef.current);\n    }\n\n    // Stop recording if active\n    if (recordingHelperRef.current && recordingHelperRef.current.isCurrentlyRecording()) {\n      recordingHelperRef.current.stopRecording().catch(console.error);\n      setIsRecording(false);\n      setRecordingTime(0);\n    }\n    if (webrtcManager) {\n      webrtcManager.leaveRoom();\n    }\n    if (onLeave) {\n      onLeave();\n    }\n  };\n\n  // Toggle QR code display\n  const handleToggleQRCode = () => {\n    setShowQRCode(prev => !prev);\n  };\n\n  // Generate connection data for QR code\n  const getConnectionData = () => {\n    return JSON.stringify({\n      roomId,\n      server: window.location.origin\n    });\n  };\n\n  // Calculate grid columns based on number of participants\n  const getGridColumns = () => {\n    // Use layout for responsive grid\n    if (layout.videoLayout === 'stack') {\n      return 'grid-cols-1';\n    }\n    const totalVideos = (isVideoEnabled ? 1 : 0) + Object.keys(remoteVideoStreams).length;\n    if (totalVideos <= 1) {\n      return 'grid-cols-1';\n    } else if (totalVideos <= 2) {\n      return 'grid-cols-2';\n    } else if (totalVideos <= 4) {\n      return 'grid-cols-2';\n    } else {\n      return 'grid-cols-3';\n    }\n  };\n\n  // Handle screen sharing change (Phase 3)\n  const handleScreenSharingChange = (isSharing, stream) => {\n    setIsScreenSharing(isSharing);\n    setScreenStream(stream);\n  };\n\n  // Handle toggle screen sharing\n  const handleToggleScreenShare = async () => {\n    if (webrtcManager) {\n      await webrtcManager.toggleScreenSharing();\n    }\n  };\n\n  // Handle recording time update\n  const handleRecordingTimeUpdate = time => {\n    setRecordingTime(time);\n  };\n\n  // Handle toggle recording\n  const handleToggleRecording = async () => {\n    const recordingHelper = recordingHelperRef.current;\n    if (!recordingHelper) {\n      return;\n    }\n    if (recordingHelper.isCurrentlyRecording()) {\n      try {\n        // Stop recording\n        const recordedBlob = await recordingHelper.stopRecording();\n\n        // Download the recording\n        recordingHelper.downloadRecording(recordedBlob, `video-chat-${roomId}`);\n\n        // Update state\n        setIsRecording(false);\n        setRecordingTime(0);\n      } catch (error) {\n        console.error('Error stopping recording:', error);\n      }\n    } else {\n      // Start recording\n      const streamsToRecord = [localVideoStream];\n\n      // Add remote streams\n      Object.values(remoteVideoStreams).forEach(stream => {\n        if (stream) {\n          streamsToRecord.push(stream);\n        }\n      });\n\n      // Add screen sharing stream if active\n      if (isScreenSharing && screenStream) {\n        streamsToRecord.push(screenStream);\n      }\n\n      // Start recording\n      const success = recordingHelper.startRecording(streamsToRecord.filter(Boolean), handleRecordingTimeUpdate);\n      if (success) {\n        setIsRecording(true);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full flex flex-col bg-gray-950\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-900 border-b border-gray-800 shadow-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold text-white\",\n            children: [\"Room: \", roomId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400\",\n            children: [\"Connected as \", userId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            className: clsx('inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]', 'rounded-full border border-transparent bg-[#D15052] shadow-md', 'text-base font-medium whitespace-nowrap text-white', 'hover:bg-[#C04042] focus:outline-none'),\n            \"aria-label\": \"Leave chat room\",\n            children: \"Leave\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-6 overflow-auto bg-gradient-to-b from-gray-950 to-gray-900\",\n      children: isConnecting ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center h-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg font-medium mb-2 text-white\",\n          children: \"Connecting...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-400\",\n          children: \"Setting up secure connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center h-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-lg font-medium text-[#D15052] mb-2\",\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-400 mb-4\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLeaveRoom,\n          className: clsx('inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]', 'rounded-full border border-transparent bg-gray-800 shadow-md', 'text-base font-medium whitespace-nowrap text-white', 'hover:bg-gray-700'),\n          children: \"Go Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col space-y-6\",\n        children: [showQRCode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 p-6 rounded-2xl shadow-lg mx-auto max-w-xs border border-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(QRCodeGenerator, {\n            connectionData: getConnectionData(),\n            className: \"mx-auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center mt-4 text-sm text-gray-300\",\n            children: \"Scan to join this room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 15\n        }, this), cameraStatus && cameraStatus.status !== 'granted' && isVideoEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700\",\n          children: /*#__PURE__*/_jsxDEV(CameraPermissionGuide, {\n            onRetry: handleRetryCameraAccess,\n            errorMessage: cameraStatus.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cn('grid gap-6', getGridColumns()),\n          children: [isVideoEnabled && /*#__PURE__*/_jsxDEV(VideoContainer, {\n            stream: isScreenSharing ? screenStream : localVideoStream,\n            isMuted: true,\n            isLocal: true,\n            isSpeaking: isSpeaking,\n            label: `${userId} (You)`,\n            isScreenSharing: isScreenSharing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 17\n          }, this), Object.entries(remoteVideoStreams).map(([peerId, stream]) => /*#__PURE__*/_jsxDEV(VideoContainer, {\n            stream: stream,\n            isMuted: false,\n            isLocal: false,\n            isSpeaking: peerSpeaking[peerId],\n            label: peerId\n          }, peerId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), !isConnecting && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-900 border-t border-gray-800 p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap items-center justify-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleMute,\n          className: clsx('inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]', 'rounded-full border border-transparent shadow-md', isMuted ? 'bg-[#D15052] text-white' : 'bg-gray-800 text-white', 'hover:bg-opacity-90 focus:outline-none'),\n          \"aria-label\": isMuted ? 'Unmute' : 'Mute',\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleVideo,\n          className: clsx('inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]', 'rounded-full border border-transparent shadow-md', isVideoEnabled ? 'bg-gray-800 text-white' : 'bg-[#4A72F5] text-white', 'hover:bg-opacity-90 focus:outline-none'),\n          \"aria-label\": isVideoEnabled ? 'Disable Video' : 'Enable Video',\n          children: isVideoEnabled ? 'Disable Video' : 'Enable Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ScreenShareButton, {\n          isScreenSharing: isScreenSharing,\n          onToggle: handleToggleScreenShare\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RecordButton, {\n          isRecording: isRecording,\n          recordingTime: recordingTime,\n          onToggle: handleToggleRecording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VideoQualityControls, {\n          currentQuality: currentVideoQuality,\n          onQualityChange: handleVideoQualityChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleQRCode,\n          className: clsx('inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]', 'rounded-full border border-transparent shadow-md', showQRCode ? 'bg-[#9C5AE5] text-white' : 'bg-gray-800 text-white', 'hover:bg-opacity-90 focus:outline-none'),\n          \"aria-label\": showQRCode ? 'Hide QR Code' : 'Show QR Code',\n          children: showQRCode ? 'Hide QR Code' : 'Show QR Code'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(NetworkQualityIndicator, {\n          quality: networkQuality\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoChatRoom, \"yXnPmVaAdShXjn8FS8TAWHhCrmQ=\");\n_c = VideoChatRoom;\nexport default VideoChatRoom;\nvar _c;\n$RefreshReg$(_c, \"VideoChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","WebRTCManager","clsx","cn","QRCodeGenerator","VideoContainer","VideoControls","CameraPermissionGuide","VideoQualityControls","NetworkQualityIndicator","ScreenShareButton","RecordButton","RecordingHelper","getOptimalLayout","addOrientationChangeListener","cleanupWebRTCResources","cleanupRecordingResources","jsxDEV","_jsxDEV","VideoChatRoom","roomId","userId","onLeave","_s","socket","setSocket","webrtcManager","setWebrtcManager","connectedPeers","setConnectedPeers","isMuted","setIsMuted","isSpeaking","setIsSpeaking","peerSpeaking","setPeerSpeaking","audioLevels","setAudioLevels","connectionQualities","setConnectionQualities","error","setError","isConnecting","setIsConnecting","showQRCode","setShowQRCode","isVideoEnabled","setIsVideoEnabled","videoDevices","setVideoDevices","cameraStatus","setCameraStatus","localVideoStream","setLocalVideoStream","remoteVideoStreams","setRemoteVideoStreams","currentVideoQuality","setCurrentVideoQuality","networkQuality","setNetworkQuality","networkMetrics","setNetworkMetrics","isScreenSharing","setIsScreenSharing","screenStream","setScreenStream","isRecording","setIsRecording","recordingTime","setRecordingTime","layout","setLayout","audioRefs","animationFrameRef","webrtcManagerRef","recordingHelperRef","newSocket","process","env","REACT_APP_SIGNALING_SERVER","window","location","origin","path","transports","secure","protocol","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","err","current","cancelAnimationFrame","disconnect","removeListener","manager","onPeerConnect","handlePeerConnect","onPeerDisconnect","handlePeerDisconnect","onSpeakingChange","handleSpeakingChange","onAudioQualityChange","handleAudioQualityChange","onError","errorMsg","onMicrophoneStatus","handleMicrophoneStatus","onCameraStatus","handleCameraStatus","onLocalVideo","handleLocalVideo","onRemoteVideo","handleRemoteVideo","onVideoStatusChange","handleVideoStatusChange","onNetworkQualityChange","handleNetworkQualityChange","onScreenSharingChange","handleScreenSharingChange","initialize","then","startAudioLevelMonitoring","getVideoDevices","devices","setVideoQuality","catch","dispose","peerId","prev","filter","id","newState","speaking","handlePeerSpeakingChange","quality","status","stream","enabled","metrics","local","handleVideoQualityChange","qualityPreset","updateAudioLevels","localLevel","getAudioLevel","prevLevels","requestAnimationFrame","handleToggleMute","newMuteState","toggleMute","handleToggleVideo","videoEnabled","toggleVideo","handleSwitchCamera","deviceId","switchCamera","handleRetryCameraAccess","handleLeaveRoom","isCurrentlyRecording","stopRecording","leaveRoom","handleToggleQRCode","getConnectionData","JSON","stringify","server","getGridColumns","videoLayout","totalVideos","Object","keys","length","isSharing","handleToggleScreenShare","toggleScreenSharing","handleRecordingTimeUpdate","time","handleToggleRecording","recordingHelper","recordedBlob","downloadRecording","streamsToRecord","values","forEach","push","success","startRecording","Boolean","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","connectionData","onRetry","errorMessage","isLocal","label","entries","map","onToggle","currentQuality","onQualityChange","_c","$RefreshReg$"],"sources":["/Users/ayadyousifshahi/Documents/webchat app/client/src/components/VideoChatRoom.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { WebRTCManager } from '../utils/webrtcManager';\nimport { clsx } from 'clsx';\nimport { cn } from '../lib/utils';\nimport QRCodeGenerator from './QRCodeGenerator';\nimport VideoContainer from './VideoContainer';\nimport VideoControls from './VideoControls';\nimport CameraPermissionGuide from './CameraPermissionGuide';\nimport VideoQualityControls from './VideoQualityControls';\nimport NetworkQualityIndicator from './NetworkQualityIndicator';\nimport ScreenShareButton from './ScreenShareButton';\nimport RecordButton from './RecordButton';\nimport RecordingHelper from './../utils/recordingHelper';\nimport { getOptimalLayout, addOrientationChangeListener } from './../utils/responsiveHelper';\nimport { cleanupWebRTCResources, cleanupRecordingResources } from './../utils/resourceCleanupHelper';\n\n/**\n * VideoChatRoom Component\n * \n * Main component for the video/voice chat room functionality.\n * Handles WebRTC connections, audio/video processing, and UI for the chat.\n */\nconst VideoChatRoom = ({ roomId, userId, onLeave }) => {\n  const [socket, setSocket] = useState(null);\n  const [webrtcManager, setWebrtcManager] = useState(null);\n  const [connectedPeers, setConnectedPeers] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [peerSpeaking, setPeerSpeaking] = useState({});\n  const [audioLevels, setAudioLevels] = useState({});\n  const [connectionQualities, setConnectionQualities] = useState({});\n  const [error, setError] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [showQRCode, setShowQRCode] = useState(false);\n  \n  // Video-related state\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [cameraStatus, setCameraStatus] = useState(null);\n  const [localVideoStream, setLocalVideoStream] = useState(null);\n  const [remoteVideoStreams, setRemoteVideoStreams] = useState({});\n  \n  // Phase 2 features - Video quality and network monitoring\n  const [currentVideoQuality, setCurrentVideoQuality] = useState('high');\n  const [networkQuality, setNetworkQuality] = useState(100);\n  const [networkMetrics, setNetworkMetrics] = useState(null);\n  \n  // Phase 3 features - Screen sharing\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenStream, setScreenStream] = useState(null);\n  \n  // Phase 3 features - Recording\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  \n  // Layout state for responsive design\n  const [layout, setLayout] = useState(getOptimalLayout());\n  \n  // References\n  const audioRefs = useRef({});\n  const animationFrameRef = useRef(null);\n  const webrtcManagerRef = useRef(null);\n  const recordingHelperRef = useRef(null);\n  \n  // Initialize socket and WebRTC manager\n  useEffect(() => {\n    // Create socket connection to signaling server\n    const newSocket = io(process.env.REACT_APP_SIGNALING_SERVER || window.location.origin, {\n      path: '/socket.io',\n      transports: ['websocket'],\n      secure: window.location.protocol === 'https:',\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n    });\n    \n    setSocket(newSocket);\n    \n    // Socket event handlers\n    newSocket.on('connect', () => {\n      console.log('Connected to signaling server');\n    });\n    \n    newSocket.on('connect_error', (err) => {\n      console.error('Connection error:', err);\n      setError('Failed to connect to the signaling server. Please try again.');\n    });\n    \n    // Clean up on unmount\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      \n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Handle device orientation changes\n  useEffect(() => {\n    const removeListener = addOrientationChangeListener(() => {\n      setLayout(getOptimalLayout());\n    });\n    \n    return () => {\n      removeListener();\n    };\n  }, []);\n  \n  // Initialize WebRTC manager when socket is ready\n  useEffect(() => {\n    if (!socket || !roomId) return;\n    \n    const manager = new WebRTCManager(socket, {\n      userId,\n      onPeerConnect: handlePeerConnect,\n      onPeerDisconnect: handlePeerDisconnect,\n      onSpeakingChange: handleSpeakingChange,\n      onAudioQualityChange: handleAudioQualityChange,\n      onError: (errorMsg) => setError(errorMsg),\n      onMicrophoneStatus: handleMicrophoneStatus,\n      onCameraStatus: handleCameraStatus,\n      onLocalVideo: handleLocalVideo,\n      onRemoteVideo: handleRemoteVideo,\n      onVideoStatusChange: handleVideoStatusChange,\n      onNetworkQualityChange: handleNetworkQualityChange, // Phase 2 - Network quality monitoring\n      onScreenSharingChange: handleScreenSharingChange, // Phase 3 - Screen sharing\n    });\n    \n    setWebrtcManager(manager);\n    webrtcManagerRef.current = manager;\n    \n    // Initialize WebRTC and join room\n    manager.initialize(roomId)\n      .then(() => {\n        setIsConnecting(false);\n        startAudioLevelMonitoring(manager);\n        \n        // Get available video devices\n        manager.getVideoDevices().then(devices => {\n          setVideoDevices(devices);\n        });\n        \n        // Set initial video quality (Phase 2)\n        if (manager.setVideoQuality) {\n          manager.setVideoQuality(currentVideoQuality);\n        }\n        \n        // Initialize recording helper (Phase 3)\n        recordingHelperRef.current = new RecordingHelper();\n      })\n      .catch((err) => {\n        console.error('Failed to initialize WebRTC:', err);\n        setError('Failed to initialize video chat. Please try again.');\n      });\n    \n    // Clean up on unmount\n    return () => {\n      if (manager) {\n        manager.dispose();\n      }\n    };\n  }, [socket, roomId, userId, currentVideoQuality]);\n  \n  // Handle peer connect\n  const handlePeerConnect = (peerId) => {\n    setConnectedPeers(prev => [...prev, peerId]);\n  };\n  \n  // Handle peer disconnect\n  const handlePeerDisconnect = (peerId) => {\n    setConnectedPeers(prev => prev.filter(id => id !== peerId));\n    \n    // Remove peer speaking status\n    setPeerSpeaking(prev => {\n      const newState = { ...prev };\n      delete newState[peerId];\n      return newState;\n    });\n    \n    // Remove peer audio level\n    setAudioLevels(prev => {\n      const newState = { ...prev };\n      delete newState[peerId];\n      return newState;\n    });\n    \n    // Remove peer video stream\n    setRemoteVideoStreams(prev => {\n      const newState = { ...prev };\n      delete newState[peerId];\n      return newState;\n    });\n    \n    // Remove peer connection quality\n    setConnectionQualities(prev => {\n      const newState = { ...prev };\n      delete newState[peerId];\n      return newState;\n    });\n  };\n  \n  // Handle speaking change\n  const handleSpeakingChange = (speaking) => {\n    setIsSpeaking(speaking);\n  };\n  \n  // Handle peer speaking change\n  const handlePeerSpeakingChange = (peerId, speaking) => {\n    setPeerSpeaking(prev => ({\n      ...prev,\n      [peerId]: speaking,\n    }));\n  };\n  \n  // Handle audio quality change\n  const handleAudioQualityChange = (quality) => {\n    // Update audio quality\n  };\n  \n  // Handle microphone status\n  const handleMicrophoneStatus = (status) => {\n    // Update microphone status\n  };\n  \n  // Handle camera status\n  const handleCameraStatus = (status) => {\n    setCameraStatus(status);\n  };\n  \n  // Handle local video\n  const handleLocalVideo = (stream) => {\n    setLocalVideoStream(stream);\n    setIsVideoEnabled(!!stream);\n  };\n  \n  // Handle remote video\n  const handleRemoteVideo = (peerId, stream) => {\n    setRemoteVideoStreams(prev => ({\n      ...prev,\n      [peerId]: stream,\n    }));\n  };\n  \n  // Handle video status change\n  const handleVideoStatusChange = (enabled) => {\n    setIsVideoEnabled(enabled);\n  };\n  \n  // Handle network quality change (Phase 2)\n  const handleNetworkQualityChange = (quality, metrics) => {\n    setNetworkQuality(quality);\n    setNetworkMetrics(metrics);\n    \n    // Update connection quality for the peer\n    setConnectionQualities(prev => ({\n      ...prev,\n      local: quality,\n    }));\n  };\n  \n  // Handle video quality change (Phase 2)\n  const handleVideoQualityChange = (qualityPreset) => {\n    if (webrtcManager && webrtcManager.setVideoQuality) {\n      webrtcManager.setVideoQuality(qualityPreset.id);\n      setCurrentVideoQuality(qualityPreset.id);\n    }\n  };\n  \n  // Start monitoring audio levels\n  const startAudioLevelMonitoring = (manager) => {\n    const updateAudioLevels = () => {\n      if (!manager) return;\n      \n      // Update local audio level\n      const localLevel = manager.getAudioLevel();\n      \n      setAudioLevels((prevLevels) => ({\n        ...prevLevels,\n        local: localLevel,\n      }));\n      \n      // Continue monitoring\n      animationFrameRef.current = requestAnimationFrame(updateAudioLevels);\n    };\n    \n    // Start monitoring\n    updateAudioLevels();\n  };\n  \n  // Toggle mute\n  const handleToggleMute = () => {\n    if (webrtcManager) {\n      const newMuteState = webrtcManager.toggleMute();\n      setIsMuted(newMuteState);\n    }\n  };\n  \n  // Toggle video\n  const handleToggleVideo = async () => {\n    if (webrtcManager) {\n      const videoEnabled = await webrtcManager.toggleVideo();\n      setIsVideoEnabled(videoEnabled);\n    }\n  };\n  \n  // Switch camera\n  const handleSwitchCamera = async (deviceId) => {\n    if (webrtcManager) {\n      await webrtcManager.switchCamera(deviceId);\n    }\n  };\n  \n  // Retry camera access\n  const handleRetryCameraAccess = async () => {\n    if (webrtcManager) {\n      const videoEnabled = await webrtcManager.toggleVideo();\n      setIsVideoEnabled(videoEnabled);\n    }\n  };\n  \n  // Leave room\n  const handleLeaveRoom = () => {\n    // Clean up WebRTC resources\n    if (webrtcManagerRef.current) {\n      cleanupWebRTCResources(webrtcManagerRef.current);\n    }\n    \n    // Clean up recording resources\n    if (recordingHelperRef.current) {\n      cleanupRecordingResources(recordingHelperRef.current);\n    }\n\n    // Stop recording if active\n    if (recordingHelperRef.current && recordingHelperRef.current.isCurrentlyRecording()) {\n      recordingHelperRef.current.stopRecording().catch(console.error);\n      setIsRecording(false);\n      setRecordingTime(0);\n    }\n    if (webrtcManager) {\n      webrtcManager.leaveRoom();\n    }\n    \n    if (onLeave) {\n      onLeave();\n    }\n  };\n  \n  // Toggle QR code display\n  const handleToggleQRCode = () => {\n    setShowQRCode((prev) => !prev);\n  };\n  \n  // Generate connection data for QR code\n  const getConnectionData = () => {\n    return JSON.stringify({\n      roomId,\n      server: window.location.origin,\n    });\n  };\n  \n  // Calculate grid columns based on number of participants\n  const getGridColumns = () => {\n    // Use layout for responsive grid\n    if (layout.videoLayout === 'stack') {\n      return 'grid-cols-1';\n    }\n    \n    const totalVideos = (isVideoEnabled ? 1 : 0) + Object.keys(remoteVideoStreams).length;\n    \n    if (totalVideos <= 1) {\n      return 'grid-cols-1';\n    } else if (totalVideos <= 2) {\n      return 'grid-cols-2';\n    } else if (totalVideos <= 4) {\n      return 'grid-cols-2';\n    } else {\n      return 'grid-cols-3';\n    }\n  };\n  \n  // Handle screen sharing change (Phase 3)\n  const handleScreenSharingChange = (isSharing, stream) => {\n    setIsScreenSharing(isSharing);\n    setScreenStream(stream);\n  };\n\n  // Handle toggle screen sharing\n  const handleToggleScreenShare = async () => {\n    if (webrtcManager) {\n      await webrtcManager.toggleScreenSharing();\n    }\n  };\n\n  // Handle recording time update\n  const handleRecordingTimeUpdate = (time) => {\n    setRecordingTime(time);\n  };\n\n  // Handle toggle recording\n  const handleToggleRecording = async () => {\n    const recordingHelper = recordingHelperRef.current;\n    \n    if (!recordingHelper) {\n      return;\n    }\n    \n    if (recordingHelper.isCurrentlyRecording()) {\n      try {\n        // Stop recording\n        const recordedBlob = await recordingHelper.stopRecording();\n        \n        // Download the recording\n        recordingHelper.downloadRecording(recordedBlob, `video-chat-${roomId}`);\n        \n        // Update state\n        setIsRecording(false);\n        setRecordingTime(0);\n      } catch (error) {\n        console.error('Error stopping recording:', error);\n      }\n    } else {\n      // Start recording\n      const streamsToRecord = [localVideoStream];\n      \n      // Add remote streams\n      Object.values(remoteVideoStreams).forEach(stream => {\n        if (stream) {\n          streamsToRecord.push(stream);\n        }\n      });\n      \n      // Add screen sharing stream if active\n      if (isScreenSharing && screenStream) {\n        streamsToRecord.push(screenStream);\n      }\n      \n      // Start recording\n      const success = recordingHelper.startRecording(\n        streamsToRecord.filter(Boolean),\n        handleRecordingTimeUpdate\n      );\n      \n      if (success) {\n        setIsRecording(true);\n      }\n    }\n  };\n  \n  return (\n    <div className=\"h-full flex flex-col bg-gray-950\">\n      {/* Header with room info and controls */}\n      <div className=\"bg-gray-900 border-b border-gray-800 shadow-md\">\n        <div className=\"flex items-center justify-between p-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-white\">Room: {roomId}</h2>\n            <p className=\"text-sm text-gray-400\">Connected as {userId}</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={handleLeaveRoom}\n              className={clsx(\n                'inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]',\n                'rounded-full border border-transparent bg-[#D15052] shadow-md',\n                'text-base font-medium whitespace-nowrap text-white',\n                'hover:bg-[#C04042] focus:outline-none'\n              )}\n              aria-label=\"Leave chat room\"\n            >\n              Leave\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main content */}\n      <div className=\"flex-1 p-6 overflow-auto bg-gradient-to-b from-gray-950 to-gray-900\">\n        {isConnecting ? (\n          <div className=\"flex flex-col items-center justify-center h-full\">\n            <div className=\"text-lg font-medium mb-2 text-white\">Connecting...</div>\n            <div className=\"text-sm text-gray-400\">\n              Setting up secure connection\n            </div>\n          </div>\n        ) : error ? (\n          <div className=\"flex flex-col items-center justify-center h-full\">\n            <div className=\"text-lg font-medium text-[#D15052] mb-2\">Error</div>\n            <div className=\"text-sm text-gray-400 mb-4\">{error}</div>\n            <button\n              onClick={handleLeaveRoom}\n              className={clsx(\n                'inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]',\n                'rounded-full border border-transparent bg-gray-800 shadow-md',\n                'text-base font-medium whitespace-nowrap text-white',\n                'hover:bg-gray-700'\n              )}\n            >\n              Go Back\n            </button>\n          </div>\n        ) : (\n          <div className=\"flex flex-col space-y-6\">\n            {/* QR Code */}\n            {showQRCode && (\n              <div className=\"bg-gray-800 p-6 rounded-2xl shadow-lg mx-auto max-w-xs border border-gray-700\">\n                <QRCodeGenerator\n                  connectionData={getConnectionData()}\n                  className=\"mx-auto\"\n                />\n                <p className=\"text-center mt-4 text-sm text-gray-300\">\n                  Scan to join this room\n                </p>\n              </div>\n            )}\n            \n            {/* Camera permission guide */}\n            {cameraStatus && cameraStatus.status !== 'granted' && isVideoEnabled && (\n              <div className=\"bg-gray-800 p-6 rounded-2xl shadow-lg border border-gray-700\">\n                <CameraPermissionGuide\n                  onRetry={handleRetryCameraAccess}\n                  errorMessage={cameraStatus.error}\n                />\n              </div>\n            )}\n            \n            {/* Video grid */}\n            <div className={cn(\n              'grid gap-6',\n              getGridColumns()\n            )}>\n              {/* Local video */}\n              {isVideoEnabled && (\n                <VideoContainer\n                  stream={isScreenSharing ? screenStream : localVideoStream}\n                  isMuted={true}\n                  isLocal={true}\n                  isSpeaking={isSpeaking}\n                  label={`${userId} (You)`}\n                  isScreenSharing={isScreenSharing}\n                />\n              )}\n              \n              {/* Remote videos */}\n              {Object.entries(remoteVideoStreams).map(([peerId, stream]) => (\n                <VideoContainer\n                  key={peerId}\n                  stream={stream}\n                  isMuted={false}\n                  isLocal={false}\n                  isSpeaking={peerSpeaking[peerId]}\n                  label={peerId}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Video controls */}\n      {!isConnecting && !error && (\n        <div className=\"bg-gray-900 border-t border-gray-800 p-6\">\n          <div className=\"flex flex-wrap items-center justify-center gap-4\">\n            {/* Mute/Unmute */}\n            <button\n              onClick={handleToggleMute}\n              className={clsx(\n                'inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]',\n                'rounded-full border border-transparent shadow-md',\n                isMuted ? 'bg-[#D15052] text-white' : 'bg-gray-800 text-white',\n                'hover:bg-opacity-90 focus:outline-none'\n              )}\n              aria-label={isMuted ? 'Unmute' : 'Mute'}\n            >\n              {isMuted ? 'Unmute' : 'Mute'}\n            </button>\n            \n            {/* Video toggle */}\n            <button\n              onClick={handleToggleVideo}\n              className={clsx(\n                'inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]',\n                'rounded-full border border-transparent shadow-md',\n                isVideoEnabled ? 'bg-gray-800 text-white' : 'bg-[#4A72F5] text-white',\n                'hover:bg-opacity-90 focus:outline-none'\n              )}\n              aria-label={isVideoEnabled ? 'Disable Video' : 'Enable Video'}\n            >\n              {isVideoEnabled ? 'Disable Video' : 'Enable Video'}\n            </button>\n            \n            {/* Screen sharing (Phase 3) */}\n            <ScreenShareButton\n              isScreenSharing={isScreenSharing}\n              onToggle={handleToggleScreenShare}\n            />\n            \n            {/* Recording (Phase 3) */}\n            <RecordButton\n              isRecording={isRecording}\n              recordingTime={recordingTime}\n              onToggle={handleToggleRecording}\n            />\n            \n            {/* Video quality controls (Phase 2) */}\n            <VideoQualityControls\n              currentQuality={currentVideoQuality}\n              onQualityChange={handleVideoQualityChange}\n            />\n            \n            {/* QR Code toggle */}\n            <button\n              onClick={handleToggleQRCode}\n              className={clsx(\n                'inline-flex items-center justify-center px-4 py-[calc(--spacing(2)-1px)]',\n                'rounded-full border border-transparent shadow-md',\n                showQRCode ? 'bg-[#9C5AE5] text-white' : 'bg-gray-800 text-white',\n                'hover:bg-opacity-90 focus:outline-none'\n              )}\n              aria-label={showQRCode ? 'Hide QR Code' : 'Show QR Code'}\n            >\n              {showQRCode ? 'Hide QR Code' : 'Show QR Code'}\n            </button>\n          </div>\n          \n          {/* Network quality indicator (Phase 2) */}\n          <div className=\"mt-6 flex justify-center\">\n            <NetworkQualityIndicator quality={networkQuality} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoChatRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}