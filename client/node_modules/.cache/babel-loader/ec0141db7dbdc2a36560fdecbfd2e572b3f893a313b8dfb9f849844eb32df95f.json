{"ast":null,"code":"/**\n * Browser detection and permission guidance utilities\n * Provides browser-specific instructions for microphone access\n */\n\n/**\n * Detect the current browser\n * @returns {Object} Browser information including name and version\n */\nexport const detectBrowser = () => {\n  const userAgent = navigator.userAgent;\n  let browserName = \"Unknown\";\n  let browserVersion = \"Unknown\";\n\n  // Chrome\n  if (/Chrome/.test(userAgent) && !/Chromium|Edge|Edg|OPR|Opera/.test(userAgent)) {\n    var _userAgent$match;\n    browserName = \"Chrome\";\n    browserVersion = ((_userAgent$match = userAgent.match(/Chrome\\/(\\d+\\.\\d+)/)) === null || _userAgent$match === void 0 ? void 0 : _userAgent$match[1]) || \"Unknown\";\n  }\n  // Firefox\n  else if (/Firefox/.test(userAgent)) {\n    var _userAgent$match2;\n    browserName = \"Firefox\";\n    browserVersion = ((_userAgent$match2 = userAgent.match(/Firefox\\/(\\d+\\.\\d+)/)) === null || _userAgent$match2 === void 0 ? void 0 : _userAgent$match2[1]) || \"Unknown\";\n  }\n  // Safari\n  else if (/Safari/.test(userAgent) && !/Chrome|Chromium|Edge|Edg|OPR|Opera/.test(userAgent)) {\n    var _userAgent$match3;\n    browserName = \"Safari\";\n    browserVersion = ((_userAgent$match3 = userAgent.match(/Version\\/(\\d+\\.\\d+)/)) === null || _userAgent$match3 === void 0 ? void 0 : _userAgent$match3[1]) || \"Unknown\";\n  }\n  // Edge (Chromium-based)\n  else if (/Edg/.test(userAgent)) {\n    var _userAgent$match4;\n    browserName = \"Edge\";\n    browserVersion = ((_userAgent$match4 = userAgent.match(/Edg\\/(\\d+\\.\\d+)/)) === null || _userAgent$match4 === void 0 ? void 0 : _userAgent$match4[1]) || \"Unknown\";\n  }\n  // Opera\n  else if (/OPR|Opera/.test(userAgent)) {\n    var _userAgent$match5;\n    browserName = \"Opera\";\n    browserVersion = ((_userAgent$match5 = userAgent.match(/(?:OPR|Opera)\\/(\\d+\\.\\d+)/)) === null || _userAgent$match5 === void 0 ? void 0 : _userAgent$match5[1]) || \"Unknown\";\n  }\n\n  // Check if running on mobile\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\n  const isIOS = /iPhone|iPad|iPod/i.test(userAgent);\n  const isAndroid = /Android/i.test(userAgent);\n  return {\n    name: browserName,\n    version: browserVersion,\n    isMobile,\n    isIOS,\n    isAndroid\n  };\n};\n\n/**\n * Get browser-specific instructions for microphone permissions\n * @returns {Object} Instructions for the current browser\n */\nexport const getMicrophonePermissionInstructions = () => {\n  const browser = detectBrowser();\n\n  // Default instructions\n  let instructions = \"Please allow microphone access in your browser settings and reload the page.\";\n\n  // Chrome/Chromium-based browsers\n  if (browser.name === \"Chrome\" || browser.name === \"Edge\" || browser.name === \"Opera\") {\n    if (browser.isMobile) {\n      if (browser.isAndroid) {\n        instructions = \"Tap the lock icon in the address bar, then tap 'Site settings' and allow microphone access. Reload the page after changing permissions.\";\n      } else if (browser.isIOS) {\n        instructions = \"iOS Chrome requires microphone permissions to be granted in iOS Settings. Go to Settings > Chrome > Microphone and enable access.\";\n      }\n    } else {\n      instructions = \"Click the lock/info icon in the address bar, select 'Site settings', and set Microphone to 'Allow'. Reload the page after changing permissions.\";\n    }\n  }\n  // Firefox\n  else if (browser.name === \"Firefox\") {\n    if (browser.isMobile) {\n      instructions = \"Tap the lock icon in the address bar, tap 'Edit Site Settings', and allow microphone access. Reload the page after changing permissions.\";\n    } else {\n      instructions = \"Click the lock icon in the address bar, click the right arrow (>) next to Connection secure, select 'More Information', go to 'Permissions', and allow microphone access. Reload the page after changing permissions.\";\n    }\n  }\n  // Safari\n  else if (browser.name === \"Safari\") {\n    if (browser.isMobile) {\n      instructions = \"Go to iOS Settings > Safari > Microphone and ensure it's enabled. Then reload this page.\";\n    } else {\n      instructions = \"Click Safari > Settings for This Website... (or Preferences > Websites > Microphone) and allow microphone access for this site. Reload the page after changing permissions.\";\n    }\n  }\n  return {\n    browser: browser.name,\n    version: browser.version,\n    isMobile: browser.isMobile,\n    instructions\n  };\n};\n\n/**\n * Create a detailed microphone status object with browser-specific guidance\n * @param {string} status - The status of microphone access ('denied', 'requesting', etc.)\n * @param {string} errorMessage - Optional error message from getUserMedia\n * @returns {Object} Detailed status object with browser-specific instructions\n */\nexport const createMicrophoneStatus = (status, errorMessage = null) => {\n  const permissionInfo = getMicrophonePermissionInstructions();\n  let message = '';\n  let instructions = '';\n  switch (status) {\n    case 'requesting':\n      message = 'Requesting Microphone Access';\n      instructions = 'Please allow microphone access when prompted by your browser.';\n      break;\n    case 'denied':\n      message = 'Microphone Access Denied';\n      instructions = permissionInfo.instructions;\n      break;\n    case 'unavailable':\n      message = 'Microphone Unavailable';\n      instructions = 'No microphone detected or your microphone is being used by another application.';\n      break;\n    case 'error':\n      message = 'Microphone Error';\n      instructions = errorMessage || 'An error occurred while accessing your microphone.';\n      break;\n    case 'granted':\n      message = 'Microphone Access Granted';\n      instructions = 'Your microphone is now connected and working.';\n      break;\n    default:\n      message = 'Microphone Status Unknown';\n      instructions = 'Please ensure your browser has microphone access.';\n  }\n  return {\n    status,\n    message,\n    instructions,\n    browser: permissionInfo.browser,\n    isMobile: permissionInfo.isMobile,\n    errorDetails: errorMessage\n  };\n};\nexport default {\n  detectBrowser,\n  getMicrophonePermissionInstructions,\n  createMicrophoneStatus\n};","map":{"version":3,"names":["detectBrowser","userAgent","navigator","browserName","browserVersion","test","_userAgent$match","match","_userAgent$match2","_userAgent$match3","_userAgent$match4","_userAgent$match5","isMobile","isIOS","isAndroid","name","version","getMicrophonePermissionInstructions","browser","instructions","createMicrophoneStatus","status","errorMessage","permissionInfo","message","errorDetails"],"sources":["/Users/ayadyousifshahi/Documents/webchat app/client/src/utils/browserDetection.js"],"sourcesContent":["/**\n * Browser detection and permission guidance utilities\n * Provides browser-specific instructions for microphone access\n */\n\n/**\n * Detect the current browser\n * @returns {Object} Browser information including name and version\n */\nexport const detectBrowser = () => {\n  const userAgent = navigator.userAgent;\n  let browserName = \"Unknown\";\n  let browserVersion = \"Unknown\";\n  \n  // Chrome\n  if (/Chrome/.test(userAgent) && !/Chromium|Edge|Edg|OPR|Opera/.test(userAgent)) {\n    browserName = \"Chrome\";\n    browserVersion = userAgent.match(/Chrome\\/(\\d+\\.\\d+)/)?.[1] || \"Unknown\";\n  } \n  // Firefox\n  else if (/Firefox/.test(userAgent)) {\n    browserName = \"Firefox\";\n    browserVersion = userAgent.match(/Firefox\\/(\\d+\\.\\d+)/)?.[1] || \"Unknown\";\n  } \n  // Safari\n  else if (/Safari/.test(userAgent) && !/Chrome|Chromium|Edge|Edg|OPR|Opera/.test(userAgent)) {\n    browserName = \"Safari\";\n    browserVersion = userAgent.match(/Version\\/(\\d+\\.\\d+)/)?.[1] || \"Unknown\";\n  } \n  // Edge (Chromium-based)\n  else if (/Edg/.test(userAgent)) {\n    browserName = \"Edge\";\n    browserVersion = userAgent.match(/Edg\\/(\\d+\\.\\d+)/)?.[1] || \"Unknown\";\n  } \n  // Opera\n  else if (/OPR|Opera/.test(userAgent)) {\n    browserName = \"Opera\";\n    browserVersion = userAgent.match(/(?:OPR|Opera)\\/(\\d+\\.\\d+)/)?.[1] || \"Unknown\";\n  }\n  \n  // Check if running on mobile\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\n  const isIOS = /iPhone|iPad|iPod/i.test(userAgent);\n  const isAndroid = /Android/i.test(userAgent);\n  \n  return {\n    name: browserName,\n    version: browserVersion,\n    isMobile,\n    isIOS,\n    isAndroid\n  };\n};\n\n/**\n * Get browser-specific instructions for microphone permissions\n * @returns {Object} Instructions for the current browser\n */\nexport const getMicrophonePermissionInstructions = () => {\n  const browser = detectBrowser();\n  \n  // Default instructions\n  let instructions = \"Please allow microphone access in your browser settings and reload the page.\";\n  \n  // Chrome/Chromium-based browsers\n  if (browser.name === \"Chrome\" || browser.name === \"Edge\" || browser.name === \"Opera\") {\n    if (browser.isMobile) {\n      if (browser.isAndroid) {\n        instructions = \"Tap the lock icon in the address bar, then tap 'Site settings' and allow microphone access. Reload the page after changing permissions.\";\n      } else if (browser.isIOS) {\n        instructions = \"iOS Chrome requires microphone permissions to be granted in iOS Settings. Go to Settings > Chrome > Microphone and enable access.\";\n      }\n    } else {\n      instructions = \"Click the lock/info icon in the address bar, select 'Site settings', and set Microphone to 'Allow'. Reload the page after changing permissions.\";\n    }\n  } \n  // Firefox\n  else if (browser.name === \"Firefox\") {\n    if (browser.isMobile) {\n      instructions = \"Tap the lock icon in the address bar, tap 'Edit Site Settings', and allow microphone access. Reload the page after changing permissions.\";\n    } else {\n      instructions = \"Click the lock icon in the address bar, click the right arrow (>) next to Connection secure, select 'More Information', go to 'Permissions', and allow microphone access. Reload the page after changing permissions.\";\n    }\n  } \n  // Safari\n  else if (browser.name === \"Safari\") {\n    if (browser.isMobile) {\n      instructions = \"Go to iOS Settings > Safari > Microphone and ensure it's enabled. Then reload this page.\";\n    } else {\n      instructions = \"Click Safari > Settings for This Website... (or Preferences > Websites > Microphone) and allow microphone access for this site. Reload the page after changing permissions.\";\n    }\n  }\n  \n  return {\n    browser: browser.name,\n    version: browser.version,\n    isMobile: browser.isMobile,\n    instructions\n  };\n};\n\n/**\n * Create a detailed microphone status object with browser-specific guidance\n * @param {string} status - The status of microphone access ('denied', 'requesting', etc.)\n * @param {string} errorMessage - Optional error message from getUserMedia\n * @returns {Object} Detailed status object with browser-specific instructions\n */\nexport const createMicrophoneStatus = (status, errorMessage = null) => {\n  const permissionInfo = getMicrophonePermissionInstructions();\n  \n  let message = '';\n  let instructions = '';\n  \n  switch (status) {\n    case 'requesting':\n      message = 'Requesting Microphone Access';\n      instructions = 'Please allow microphone access when prompted by your browser.';\n      break;\n    case 'denied':\n      message = 'Microphone Access Denied';\n      instructions = permissionInfo.instructions;\n      break;\n    case 'unavailable':\n      message = 'Microphone Unavailable';\n      instructions = 'No microphone detected or your microphone is being used by another application.';\n      break;\n    case 'error':\n      message = 'Microphone Error';\n      instructions = errorMessage || 'An error occurred while accessing your microphone.';\n      break;\n    case 'granted':\n      message = 'Microphone Access Granted';\n      instructions = 'Your microphone is now connected and working.';\n      break;\n    default:\n      message = 'Microphone Status Unknown';\n      instructions = 'Please ensure your browser has microphone access.';\n  }\n  \n  return {\n    status,\n    message,\n    instructions,\n    browser: permissionInfo.browser,\n    isMobile: permissionInfo.isMobile,\n    errorDetails: errorMessage\n  };\n};\n\nexport default {\n  detectBrowser,\n  getMicrophonePermissionInstructions,\n  createMicrophoneStatus\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAGA,CAAA,KAAM;EACjC,MAAMC,SAAS,GAAGC,SAAS,CAACD,SAAS;EACrC,IAAIE,WAAW,GAAG,SAAS;EAC3B,IAAIC,cAAc,GAAG,SAAS;;EAE9B;EACA,IAAI,QAAQ,CAACC,IAAI,CAACJ,SAAS,CAAC,IAAI,CAAC,6BAA6B,CAACI,IAAI,CAACJ,SAAS,CAAC,EAAE;IAAA,IAAAK,gBAAA;IAC9EH,WAAW,GAAG,QAAQ;IACtBC,cAAc,GAAG,EAAAE,gBAAA,GAAAL,SAAS,CAACM,KAAK,CAAC,oBAAoB,CAAC,cAAAD,gBAAA,uBAArCA,gBAAA,CAAwC,CAAC,CAAC,KAAI,SAAS;EAC1E;EACA;EAAA,KACK,IAAI,SAAS,CAACD,IAAI,CAACJ,SAAS,CAAC,EAAE;IAAA,IAAAO,iBAAA;IAClCL,WAAW,GAAG,SAAS;IACvBC,cAAc,GAAG,EAAAI,iBAAA,GAAAP,SAAS,CAACM,KAAK,CAAC,qBAAqB,CAAC,cAAAC,iBAAA,uBAAtCA,iBAAA,CAAyC,CAAC,CAAC,KAAI,SAAS;EAC3E;EACA;EAAA,KACK,IAAI,QAAQ,CAACH,IAAI,CAACJ,SAAS,CAAC,IAAI,CAAC,oCAAoC,CAACI,IAAI,CAACJ,SAAS,CAAC,EAAE;IAAA,IAAAQ,iBAAA;IAC1FN,WAAW,GAAG,QAAQ;IACtBC,cAAc,GAAG,EAAAK,iBAAA,GAAAR,SAAS,CAACM,KAAK,CAAC,qBAAqB,CAAC,cAAAE,iBAAA,uBAAtCA,iBAAA,CAAyC,CAAC,CAAC,KAAI,SAAS;EAC3E;EACA;EAAA,KACK,IAAI,KAAK,CAACJ,IAAI,CAACJ,SAAS,CAAC,EAAE;IAAA,IAAAS,iBAAA;IAC9BP,WAAW,GAAG,MAAM;IACpBC,cAAc,GAAG,EAAAM,iBAAA,GAAAT,SAAS,CAACM,KAAK,CAAC,iBAAiB,CAAC,cAAAG,iBAAA,uBAAlCA,iBAAA,CAAqC,CAAC,CAAC,KAAI,SAAS;EACvE;EACA;EAAA,KACK,IAAI,WAAW,CAACL,IAAI,CAACJ,SAAS,CAAC,EAAE;IAAA,IAAAU,iBAAA;IACpCR,WAAW,GAAG,OAAO;IACrBC,cAAc,GAAG,EAAAO,iBAAA,GAAAV,SAAS,CAACM,KAAK,CAAC,2BAA2B,CAAC,cAAAI,iBAAA,uBAA5CA,iBAAA,CAA+C,CAAC,CAAC,KAAI,SAAS;EACjF;;EAEA;EACA,MAAMC,QAAQ,GAAG,gEAAgE,CAACP,IAAI,CAACJ,SAAS,CAAC;EACjG,MAAMY,KAAK,GAAG,mBAAmB,CAACR,IAAI,CAACJ,SAAS,CAAC;EACjD,MAAMa,SAAS,GAAG,UAAU,CAACT,IAAI,CAACJ,SAAS,CAAC;EAE5C,OAAO;IACLc,IAAI,EAAEZ,WAAW;IACjBa,OAAO,EAAEZ,cAAc;IACvBQ,QAAQ;IACRC,KAAK;IACLC;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,mCAAmC,GAAGA,CAAA,KAAM;EACvD,MAAMC,OAAO,GAAGlB,aAAa,CAAC,CAAC;;EAE/B;EACA,IAAImB,YAAY,GAAG,8EAA8E;;EAEjG;EACA,IAAID,OAAO,CAACH,IAAI,KAAK,QAAQ,IAAIG,OAAO,CAACH,IAAI,KAAK,MAAM,IAAIG,OAAO,CAACH,IAAI,KAAK,OAAO,EAAE;IACpF,IAAIG,OAAO,CAACN,QAAQ,EAAE;MACpB,IAAIM,OAAO,CAACJ,SAAS,EAAE;QACrBK,YAAY,GAAG,yIAAyI;MAC1J,CAAC,MAAM,IAAID,OAAO,CAACL,KAAK,EAAE;QACxBM,YAAY,GAAG,mIAAmI;MACpJ;IACF,CAAC,MAAM;MACLA,YAAY,GAAG,iJAAiJ;IAClK;EACF;EACA;EAAA,KACK,IAAID,OAAO,CAACH,IAAI,KAAK,SAAS,EAAE;IACnC,IAAIG,OAAO,CAACN,QAAQ,EAAE;MACpBO,YAAY,GAAG,0IAA0I;IAC3J,CAAC,MAAM;MACLA,YAAY,GAAG,uNAAuN;IACxO;EACF;EACA;EAAA,KACK,IAAID,OAAO,CAACH,IAAI,KAAK,QAAQ,EAAE;IAClC,IAAIG,OAAO,CAACN,QAAQ,EAAE;MACpBO,YAAY,GAAG,0FAA0F;IAC3G,CAAC,MAAM;MACLA,YAAY,GAAG,6KAA6K;IAC9L;EACF;EAEA,OAAO;IACLD,OAAO,EAAEA,OAAO,CAACH,IAAI;IACrBC,OAAO,EAAEE,OAAO,CAACF,OAAO;IACxBJ,QAAQ,EAAEM,OAAO,CAACN,QAAQ;IAC1BO;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,MAAM,EAAEC,YAAY,GAAG,IAAI,KAAK;EACrE,MAAMC,cAAc,GAAGN,mCAAmC,CAAC,CAAC;EAE5D,IAAIO,OAAO,GAAG,EAAE;EAChB,IAAIL,YAAY,GAAG,EAAE;EAErB,QAAQE,MAAM;IACZ,KAAK,YAAY;MACfG,OAAO,GAAG,8BAA8B;MACxCL,YAAY,GAAG,+DAA+D;MAC9E;IACF,KAAK,QAAQ;MACXK,OAAO,GAAG,0BAA0B;MACpCL,YAAY,GAAGI,cAAc,CAACJ,YAAY;MAC1C;IACF,KAAK,aAAa;MAChBK,OAAO,GAAG,wBAAwB;MAClCL,YAAY,GAAG,iFAAiF;MAChG;IACF,KAAK,OAAO;MACVK,OAAO,GAAG,kBAAkB;MAC5BL,YAAY,GAAGG,YAAY,IAAI,oDAAoD;MACnF;IACF,KAAK,SAAS;MACZE,OAAO,GAAG,2BAA2B;MACrCL,YAAY,GAAG,+CAA+C;MAC9D;IACF;MACEK,OAAO,GAAG,2BAA2B;MACrCL,YAAY,GAAG,mDAAmD;EACtE;EAEA,OAAO;IACLE,MAAM;IACNG,OAAO;IACPL,YAAY;IACZD,OAAO,EAAEK,cAAc,CAACL,OAAO;IAC/BN,QAAQ,EAAEW,cAAc,CAACX,QAAQ;IACjCa,YAAY,EAAEH;EAChB,CAAC;AACH,CAAC;AAED,eAAe;EACbtB,aAAa;EACbiB,mCAAmC;EACnCG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}