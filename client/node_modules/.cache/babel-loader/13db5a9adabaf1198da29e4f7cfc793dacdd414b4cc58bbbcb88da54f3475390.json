{"ast":null,"code":"import { createEnhancedAudioStream, SpeakingDetector, AudioQualityMonitor } from './audioProcessor';\n\n/**\n * WebRTC Connection Manager\n * \n * Manages WebRTC peer connections with enhanced audio processing,\n * connection resilience, and adaptive bitrate streaming.\n */\nexport class WebRTCManager {\n  constructor(socket, options = {}) {\n    this.socket = socket;\n    this.peerConnections = new Map(); // Map of peer ID to RTCPeerConnection\n    this.localStream = null;\n    this.roomId = null;\n    this.userId = options.userId || `user_${Math.random().toString(36).substr(2, 9)}`;\n    this.speakingDetector = null;\n    this.audioQualityMonitors = new Map();\n\n    // Configuration\n    this.config = {\n      iceServers: options.iceServers || [{\n        urls: 'stun:stun.l.google.com:19302'\n      }, {\n        urls: 'stun:stun1.l.google.com:19302'\n      }],\n      iceTransportPolicy: options.iceTransportPolicy || 'all',\n      sdpSemantics: 'unified-plan',\n      // Enable DTLS-SRTP for end-to-end encryption\n      // This is enabled by default in modern browsers\n      // but we explicitly set it for clarity\n      rtcpMuxPolicy: 'require'\n    };\n\n    // Audio constraints\n    this.audioConstraints = {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n      // Prioritize voice clarity\n      channelCount: 1,\n      sampleRate: 48000,\n      sampleSize: 16\n    };\n\n    // Event callbacks\n    this.onPeerConnect = options.onPeerConnect || null;\n    this.onPeerDisconnect = options.onPeerDisconnect || null;\n    this.onSpeakingChange = options.onSpeakingChange || null;\n    this.onAudioQualityChange = options.onAudioQualityChange || null;\n    this.onError = options.onError || null;\n\n    // Bind socket event handlers\n    this._bindSocketEvents();\n  }\n\n  /**\n   * Initialize WebRTC with local audio stream\n   * @param {string} roomId - ID of the room to join\n   * @returns {Promise<boolean>} Success status\n   */\n  async initialize(roomId) {\n    try {\n      // Store room ID\n      this.roomId = roomId;\n\n      // Get user media with enhanced audio settings\n      this.localStream = await navigator.mediaDevices.getUserMedia({\n        audio: this.audioConstraints,\n        video: false\n      });\n\n      // Create speaking detector\n      this.speakingDetector = new SpeakingDetector(this.localStream, {\n        onSpeakingChange: speaking => {\n          if (this.onSpeakingChange) {\n            this.onSpeakingChange(speaking);\n          }\n\n          // Emit speaking status to other users\n          if (this.socket && this.socket.connected) {\n            this.socket.emit('speaking', {\n              roomId: this.roomId,\n              speaking\n            });\n          }\n        }\n      });\n      this.speakingDetector.start();\n\n      // Bind socket events\n      this._bindSocketEvents();\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize WebRTC:', error);\n      if (this.onError) {\n        this.onError('Failed to access microphone. Please check your permissions.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new peer connection for a user\n   * @param {string} peerId - ID of the peer to connect to\n   * @param {boolean} isInitiator - Whether this peer is initiating the connection\n   * @returns {RTCPeerConnection} The created peer connection\n   */\n  _createPeerConnection(peerId, isInitiator = false) {\n    try {\n      // Create new peer connection\n      const peerConnection = new RTCPeerConnection(this.config);\n\n      // Add local stream tracks to peer connection\n      if (this.localStream) {\n        this.localStream.getTracks().forEach(track => {\n          peerConnection.addTrack(track, this.localStream);\n        });\n      }\n\n      // Handle ICE candidates\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.socket.emit('iceCandidate', {\n            roomId: this.roomId,\n            to: peerId,\n            from: this.userId,\n            candidate: event.candidate\n          });\n        }\n      };\n\n      // Handle connection state changes\n      peerConnection.onconnectionstatechange = () => {\n        switch (peerConnection.connectionState) {\n          case 'connected':\n            console.log(`Connected to peer: ${peerId}`);\n            if (this.onPeerConnect) {\n              this.onPeerConnect(peerId);\n            }\n            break;\n          case 'disconnected':\n          case 'failed':\n          case 'closed':\n            console.log(`Disconnected from peer: ${peerId}`);\n            if (this.onPeerDisconnect) {\n              this.onPeerDisconnect(peerId);\n            }\n            this._cleanupPeerConnection(peerId);\n            break;\n          default:\n            console.log(`Connection state changed to: ${peerConnection.connectionState}`);\n            break;\n        }\n      };\n\n      // Handle incoming tracks\n      peerConnection.ontrack = event => {\n        const stream = event.streams[0];\n        // Store remote stream and create audio element\n        if (stream) {\n          // Create audio quality monitor\n          const qualityMonitor = new AudioQualityMonitor(peerConnection, {\n            onQualityChange: (quality, metrics) => {\n              if (this.onAudioQualityChange) {\n                this.onAudioQualityChange(peerId, quality, metrics);\n              }\n            }\n          });\n          qualityMonitor.start();\n          this.audioQualityMonitors.set(peerId, qualityMonitor);\n\n          // Notify about the new stream\n          if (this.onPeerConnect) {\n            this.onPeerConnect(peerId, stream);\n          }\n        }\n      };\n\n      // Store peer connection\n      this.peerConnections.set(peerId, peerConnection);\n\n      // If initiator, create and send offer\n      if (isInitiator) {\n        this._createAndSendOffer(peerId);\n      }\n      return peerConnection;\n    } catch (error) {\n      console.error('Error creating peer connection:', error);\n      if (this.onError) {\n        this.onError('Failed to create connection. Please try again.');\n      }\n      return null;\n    }\n  }\n\n  /**\n   * Create and send an offer to a peer\n   * @param {string} peerId - ID of the peer to send offer to\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   */\n  async _createAndSendOffer(peerId) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) return;\n\n      // Create offer with audio preferences\n      const offer = await peerConnection.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: false\n      });\n\n      // Set local description\n      await peerConnection.setLocalDescription(offer);\n\n      // Send offer to peer\n      this.socket.emit('offer', {\n        roomId: this.roomId,\n        to: peerId,\n        from: this.userId,\n        offer: peerConnection.localDescription\n      });\n    } catch (error) {\n      console.error('Error creating offer:', error);\n      if (this.onError) {\n        this.onError('Failed to create connection offer. Please try again.');\n      }\n    }\n  }\n\n  /**\n   * Handle incoming offer from a peer\n   * @param {string} peerId - ID of the peer who sent the offer\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   */\n  async _handleOffer(peerId, offer) {\n    try {\n      // Get or create peer connection\n      let peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) {\n        peerConnection = this._createPeerConnection(peerId);\n      }\n\n      // Set remote description\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n      // Create answer\n      const answer = await peerConnection.createAnswer();\n\n      // Set local description\n      await peerConnection.setLocalDescription(answer);\n\n      // Send answer to peer\n      this.socket.emit('answer', {\n        roomId: this.roomId,\n        to: peerId,\n        from: this.userId,\n        answer: peerConnection.localDescription\n      });\n    } catch (error) {\n      console.error('Error handling offer:', error);\n      if (this.onError) {\n        this.onError('Failed to process incoming connection. Please try again.');\n      }\n    }\n  }\n\n  /**\n   * Handle incoming answer from a peer\n   * @param {string} peerId - ID of the peer who sent the answer\n   * @param {RTCSessionDescription} answer - The answer from the peer\n   */\n  async _handleAnswer(peerId, answer) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    } catch (error) {\n      console.error('Error handling answer:', error);\n      if (this.onError) {\n        this.onError('Failed to establish connection. Please try again.');\n      }\n    }\n  }\n\n  /**\n   * Handle incoming ICE candidate from a peer\n   * @param {string} peerId - ID of the peer who sent the ICE candidate\n   * @param {RTCIceCandidate} candidate - The ICE candidate\n   */\n  async _handleIceCandidate(peerId, candidate) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (peerConnection) {\n        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n      if (this.onError) {\n        this.onError('Failed to establish connection. Please try again.');\n      }\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   * @param {string} peerId - ID of the peer who initiated the call\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   * @returns {Promise<void>}\n   */\n  async acceptIncomingCall(peerId, offer) {\n    try {\n      await this._handleOffer(peerId, offer);\n      return true;\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      if (this.onError) {\n        this.onError('Failed to accept call. Please try again.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Handle an answer from a peer\n   * @param {string} peerId - ID of the peer who sent the answer\n   * @param {RTCSessionDescription} answer - The answer from the peer\n   * @returns {Promise<void>}\n   */\n  async handleAnswer(peerId, answer) {\n    return this._handleAnswer(peerId, answer);\n  }\n\n  /**\n   * Add an ICE candidate from a peer\n   * @param {string} peerId - ID of the peer who sent the ICE candidate\n   * @param {RTCIceCandidate} candidate - The ICE candidate\n   * @returns {Promise<void>}\n   */\n  async addIceCandidate(peerId, candidate) {\n    return this._handleIceCandidate(peerId, candidate);\n  }\n\n  /**\n   * Bind socket event handlers\n   */\n  _bindSocketEvents() {\n    if (!this.socket) return;\n\n    // Handle user joined event\n    this.socket.on('userJoined', ({\n      userId\n    }) => {\n      if (userId !== this.userId) {\n        this._createPeerConnection(userId, true);\n      }\n    });\n\n    // Handle user left event\n    this.socket.on('userLeft', ({\n      userId\n    }) => {\n      this._cleanupPeerConnection(userId);\n      if (this.onPeerDisconnect) {\n        this.onPeerDisconnect(userId);\n      }\n    });\n\n    // Handle offer\n    this.socket.on('offer', ({\n      from,\n      offer\n    }) => {\n      this._handleOffer(from, offer);\n    });\n\n    // Handle answer\n    this.socket.on('answer', ({\n      from,\n      answer\n    }) => {\n      this._handleAnswer(from, answer);\n    });\n\n    // Handle ICE candidate\n    this.socket.on('iceCandidate', ({\n      from,\n      candidate\n    }) => {\n      this._handleIceCandidate(from, candidate);\n    });\n\n    // Handle speaking status\n    this.socket.on('speaking', ({\n      userId,\n      speaking\n    }) => {\n      if (this.onSpeakingChange && userId !== this.userId) {\n        this.onSpeakingChange(speaking, userId);\n      }\n    });\n  }\n\n  /**\n   * Clean up peer connection\n   * @param {string} peerId - ID of the peer to clean up\n   */\n  _cleanupPeerConnection(peerId) {\n    // Clean up quality monitor\n    const qualityMonitor = this.audioQualityMonitors.get(peerId);\n    if (qualityMonitor) {\n      qualityMonitor.dispose();\n      this.audioQualityMonitors.delete(peerId);\n    }\n\n    // Clean up peer connection\n    const peerConnection = this.peerConnections.get(peerId);\n    if (peerConnection) {\n      peerConnection.onicecandidate = null;\n      peerConnection.ontrack = null;\n      peerConnection.onconnectionstatechange = null;\n\n      // Close connection\n      peerConnection.close();\n      this.peerConnections.delete(peerId);\n    }\n  }\n\n  /**\n   * Mute or unmute local audio\n   * @param {boolean} muted - Whether to mute audio\n   */\n  setMuted(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        track.enabled = !muted;\n      });\n    }\n  }\n\n  /**\n   * Check if local audio is muted\n   * @returns {boolean} Whether local audio is muted\n   */\n  isMuted() {\n    if (this.localStream) {\n      const audioTracks = this.localStream.getAudioTracks();\n      if (audioTracks.length > 0) {\n        return !audioTracks[0].enabled;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Get current audio level (0-100)\n   * @returns {number} Audio level\n   */\n  getAudioLevel() {\n    if (this.speakingDetector) {\n      return this.speakingDetector.getAudioLevel();\n    }\n    return 0;\n  }\n\n  /**\n   * Get connection quality for a peer\n   * @param {string} peerId - ID of the peer\n   * @returns {Promise<Object>} Quality metrics\n   */\n  async getConnectionQuality(peerId) {\n    const qualityMonitor = this.audioQualityMonitors.get(peerId);\n    if (qualityMonitor) {\n      return await qualityMonitor.getQualityMetrics();\n    }\n    return {\n      quality: 'unknown',\n      metrics: {}\n    };\n  }\n\n  /**\n   * Leave the room and clean up all connections\n   */\n  leaveRoom() {\n    // Stop speaking detector\n    if (this.speakingDetector) {\n      this.speakingDetector.dispose();\n      this.speakingDetector = null;\n    }\n\n    // Clean up all peer connections\n    for (const peerId of this.peerConnections.keys()) {\n      this._cleanupPeerConnection(peerId);\n    }\n\n    // Stop local stream tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.localStream = null;\n    }\n\n    // Leave room via socket\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('leave', {\n        roomId: this.roomId,\n        userId: this.userId\n      });\n    }\n    this.roomId = null;\n  }\n\n  /**\n   * Start a call with a specific peer\n   * @param {string} peerId - ID of the peer to call\n   * @returns {Promise<void>}\n   */\n  async startCall(peerId) {\n    try {\n      // Create peer connection if it doesn't exist\n      let peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) {\n        peerConnection = this._createPeerConnection(peerId, true);\n      } else {\n        // If connection exists but we need to initiate a call\n        this._createAndSendOffer(peerId);\n      }\n      return peerConnection;\n    } catch (error) {\n      console.error('Error starting call:', error);\n      if (this.onError) {\n        this.onError('Failed to start call. Please try again.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose() {\n    this.leaveRoom();\n\n    // Unbind socket events\n    if (this.socket) {\n      this.socket.off('userJoined');\n      this.socket.off('userLeft');\n      this.socket.off('offer');\n      this.socket.off('answer');\n      this.socket.off('iceCandidate');\n      this.socket.off('speaking');\n    }\n  }\n}","map":{"version":3,"names":["createEnhancedAudioStream","SpeakingDetector","AudioQualityMonitor","WebRTCManager","constructor","socket","options","peerConnections","Map","localStream","roomId","userId","Math","random","toString","substr","speakingDetector","audioQualityMonitors","config","iceServers","urls","iceTransportPolicy","sdpSemantics","rtcpMuxPolicy","audioConstraints","echoCancellation","noiseSuppression","autoGainControl","channelCount","sampleRate","sampleSize","onPeerConnect","onPeerDisconnect","onSpeakingChange","onAudioQualityChange","onError","_bindSocketEvents","initialize","navigator","mediaDevices","getUserMedia","audio","video","speaking","connected","emit","start","error","console","_createPeerConnection","peerId","isInitiator","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","to","from","onconnectionstatechange","connectionState","log","_cleanupPeerConnection","ontrack","stream","streams","qualityMonitor","onQualityChange","quality","metrics","set","_createAndSendOffer","get","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","localDescription","_handleOffer","setRemoteDescription","RTCSessionDescription","answer","createAnswer","_handleAnswer","_handleIceCandidate","addIceCandidate","RTCIceCandidate","acceptIncomingCall","handleAnswer","on","dispose","delete","close","setMuted","muted","getAudioTracks","enabled","isMuted","audioTracks","length","getAudioLevel","getConnectionQuality","getQualityMetrics","leaveRoom","keys","stop","startCall","off"],"sources":["/Users/ayadyousifshahi/Documents/webchat app/client/src/utils/webrtcManager.js"],"sourcesContent":["import { createEnhancedAudioStream, SpeakingDetector, AudioQualityMonitor } from './audioProcessor';\n\n/**\n * WebRTC Connection Manager\n * \n * Manages WebRTC peer connections with enhanced audio processing,\n * connection resilience, and adaptive bitrate streaming.\n */\nexport class WebRTCManager {\n  constructor(socket, options = {}) {\n    this.socket = socket;\n    this.peerConnections = new Map(); // Map of peer ID to RTCPeerConnection\n    this.localStream = null;\n    this.roomId = null;\n    this.userId = options.userId || `user_${Math.random().toString(36).substr(2, 9)}`;\n    this.speakingDetector = null;\n    this.audioQualityMonitors = new Map();\n    \n    // Configuration\n    this.config = {\n      iceServers: options.iceServers || [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n      ],\n      iceTransportPolicy: options.iceTransportPolicy || 'all',\n      sdpSemantics: 'unified-plan',\n      // Enable DTLS-SRTP for end-to-end encryption\n      // This is enabled by default in modern browsers\n      // but we explicitly set it for clarity\n      rtcpMuxPolicy: 'require',\n    };\n    \n    // Audio constraints\n    this.audioConstraints = {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n      // Prioritize voice clarity\n      channelCount: 1,\n      sampleRate: 48000,\n      sampleSize: 16,\n    };\n    \n    // Event callbacks\n    this.onPeerConnect = options.onPeerConnect || null;\n    this.onPeerDisconnect = options.onPeerDisconnect || null;\n    this.onSpeakingChange = options.onSpeakingChange || null;\n    this.onAudioQualityChange = options.onAudioQualityChange || null;\n    this.onError = options.onError || null;\n    \n    // Bind socket event handlers\n    this._bindSocketEvents();\n  }\n  \n  /**\n   * Initialize WebRTC with local audio stream\n   * @param {string} roomId - ID of the room to join\n   * @returns {Promise<boolean>} Success status\n   */\n  async initialize(roomId) {\n    try {\n      // Store room ID\n      this.roomId = roomId;\n      \n      // Get user media with enhanced audio settings\n      this.localStream = await navigator.mediaDevices.getUserMedia({\n        audio: this.audioConstraints,\n        video: false\n      });\n      \n      // Create speaking detector\n      this.speakingDetector = new SpeakingDetector(this.localStream, {\n        onSpeakingChange: (speaking) => {\n          if (this.onSpeakingChange) {\n            this.onSpeakingChange(speaking);\n          }\n          \n          // Emit speaking status to other users\n          if (this.socket && this.socket.connected) {\n            this.socket.emit('speaking', {\n              roomId: this.roomId,\n              speaking\n            });\n          }\n        }\n      });\n      this.speakingDetector.start();\n      \n      // Bind socket events\n      this._bindSocketEvents();\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to initialize WebRTC:', error);\n      if (this.onError) {\n        this.onError('Failed to access microphone. Please check your permissions.');\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Create a new peer connection for a user\n   * @param {string} peerId - ID of the peer to connect to\n   * @param {boolean} isInitiator - Whether this peer is initiating the connection\n   * @returns {RTCPeerConnection} The created peer connection\n   */\n  _createPeerConnection(peerId, isInitiator = false) {\n    try {\n      // Create new peer connection\n      const peerConnection = new RTCPeerConnection(this.config);\n      \n      // Add local stream tracks to peer connection\n      if (this.localStream) {\n        this.localStream.getTracks().forEach(track => {\n          peerConnection.addTrack(track, this.localStream);\n        });\n      }\n      \n      // Handle ICE candidates\n      peerConnection.onicecandidate = (event) => {\n        if (event.candidate) {\n          this.socket.emit('iceCandidate', {\n            roomId: this.roomId,\n            to: peerId,\n            from: this.userId,\n            candidate: event.candidate,\n          });\n        }\n      };\n      \n      // Handle connection state changes\n      peerConnection.onconnectionstatechange = () => {\n        switch (peerConnection.connectionState) {\n          case 'connected':\n            console.log(`Connected to peer: ${peerId}`);\n            if (this.onPeerConnect) {\n              this.onPeerConnect(peerId);\n            }\n            break;\n          case 'disconnected':\n          case 'failed':\n          case 'closed':\n            console.log(`Disconnected from peer: ${peerId}`);\n            if (this.onPeerDisconnect) {\n              this.onPeerDisconnect(peerId);\n            }\n            this._cleanupPeerConnection(peerId);\n            break;\n          default:\n            console.log(`Connection state changed to: ${peerConnection.connectionState}`);\n            break;\n        }\n      };\n      \n      // Handle incoming tracks\n      peerConnection.ontrack = (event) => {\n        const stream = event.streams[0];\n        // Store remote stream and create audio element\n        if (stream) {\n          // Create audio quality monitor\n          const qualityMonitor = new AudioQualityMonitor(peerConnection, {\n            onQualityChange: (quality, metrics) => {\n              if (this.onAudioQualityChange) {\n                this.onAudioQualityChange(peerId, quality, metrics);\n              }\n            }\n          });\n          qualityMonitor.start();\n          this.audioQualityMonitors.set(peerId, qualityMonitor);\n          \n          // Notify about the new stream\n          if (this.onPeerConnect) {\n            this.onPeerConnect(peerId, stream);\n          }\n        }\n      };\n      \n      // Store peer connection\n      this.peerConnections.set(peerId, peerConnection);\n      \n      // If initiator, create and send offer\n      if (isInitiator) {\n        this._createAndSendOffer(peerId);\n      }\n      \n      return peerConnection;\n    } catch (error) {\n      console.error('Error creating peer connection:', error);\n      if (this.onError) {\n        this.onError('Failed to create connection. Please try again.');\n      }\n      return null;\n    }\n  }\n  \n  /**\n   * Create and send an offer to a peer\n   * @param {string} peerId - ID of the peer to send offer to\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   */\n  async _createAndSendOffer(peerId) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) return;\n      \n      // Create offer with audio preferences\n      const offer = await peerConnection.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: false,\n      });\n      \n      // Set local description\n      await peerConnection.setLocalDescription(offer);\n      \n      // Send offer to peer\n      this.socket.emit('offer', {\n        roomId: this.roomId,\n        to: peerId,\n        from: this.userId,\n        offer: peerConnection.localDescription,\n      });\n    } catch (error) {\n      console.error('Error creating offer:', error);\n      if (this.onError) {\n        this.onError('Failed to create connection offer. Please try again.');\n      }\n    }\n  }\n  \n  /**\n   * Handle incoming offer from a peer\n   * @param {string} peerId - ID of the peer who sent the offer\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   */\n  async _handleOffer(peerId, offer) {\n    try {\n      // Get or create peer connection\n      let peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) {\n        peerConnection = this._createPeerConnection(peerId);\n      }\n      \n      // Set remote description\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n      \n      // Create answer\n      const answer = await peerConnection.createAnswer();\n      \n      // Set local description\n      await peerConnection.setLocalDescription(answer);\n      \n      // Send answer to peer\n      this.socket.emit('answer', {\n        roomId: this.roomId,\n        to: peerId,\n        from: this.userId,\n        answer: peerConnection.localDescription,\n      });\n    } catch (error) {\n      console.error('Error handling offer:', error);\n      if (this.onError) {\n        this.onError('Failed to process incoming connection. Please try again.');\n      }\n    }\n  }\n  \n  /**\n   * Handle incoming answer from a peer\n   * @param {string} peerId - ID of the peer who sent the answer\n   * @param {RTCSessionDescription} answer - The answer from the peer\n   */\n  async _handleAnswer(peerId, answer) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    } catch (error) {\n      console.error('Error handling answer:', error);\n      if (this.onError) {\n        this.onError('Failed to establish connection. Please try again.');\n      }\n    }\n  }\n  \n  /**\n   * Handle incoming ICE candidate from a peer\n   * @param {string} peerId - ID of the peer who sent the ICE candidate\n   * @param {RTCIceCandidate} candidate - The ICE candidate\n   */\n  async _handleIceCandidate(peerId, candidate) {\n    try {\n      const peerConnection = this.peerConnections.get(peerId);\n      if (peerConnection) {\n        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n      if (this.onError) {\n        this.onError('Failed to establish connection. Please try again.');\n      }\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   * @param {string} peerId - ID of the peer who initiated the call\n   * @param {RTCSessionDescription} offer - The offer from the peer\n   * @returns {Promise<void>}\n   */\n  async acceptIncomingCall(peerId, offer) {\n    try {\n      await this._handleOffer(peerId, offer);\n      return true;\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      if (this.onError) {\n        this.onError('Failed to accept call. Please try again.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Handle an answer from a peer\n   * @param {string} peerId - ID of the peer who sent the answer\n   * @param {RTCSessionDescription} answer - The answer from the peer\n   * @returns {Promise<void>}\n   */\n  async handleAnswer(peerId, answer) {\n    return this._handleAnswer(peerId, answer);\n  }\n\n  /**\n   * Add an ICE candidate from a peer\n   * @param {string} peerId - ID of the peer who sent the ICE candidate\n   * @param {RTCIceCandidate} candidate - The ICE candidate\n   * @returns {Promise<void>}\n   */\n  async addIceCandidate(peerId, candidate) {\n    return this._handleIceCandidate(peerId, candidate);\n  }\n  \n  /**\n   * Bind socket event handlers\n   */\n  _bindSocketEvents() {\n    if (!this.socket) return;\n    \n    // Handle user joined event\n    this.socket.on('userJoined', ({ userId }) => {\n      if (userId !== this.userId) {\n        this._createPeerConnection(userId, true);\n      }\n    });\n    \n    // Handle user left event\n    this.socket.on('userLeft', ({ userId }) => {\n      this._cleanupPeerConnection(userId);\n      if (this.onPeerDisconnect) {\n        this.onPeerDisconnect(userId);\n      }\n    });\n    \n    // Handle offer\n    this.socket.on('offer', ({ from, offer }) => {\n      this._handleOffer(from, offer);\n    });\n    \n    // Handle answer\n    this.socket.on('answer', ({ from, answer }) => {\n      this._handleAnswer(from, answer);\n    });\n    \n    // Handle ICE candidate\n    this.socket.on('iceCandidate', ({ from, candidate }) => {\n      this._handleIceCandidate(from, candidate);\n    });\n    \n    // Handle speaking status\n    this.socket.on('speaking', ({ userId, speaking }) => {\n      if (this.onSpeakingChange && userId !== this.userId) {\n        this.onSpeakingChange(speaking, userId);\n      }\n    });\n  }\n  \n  /**\n   * Clean up peer connection\n   * @param {string} peerId - ID of the peer to clean up\n   */\n  _cleanupPeerConnection(peerId) {\n    // Clean up quality monitor\n    const qualityMonitor = this.audioQualityMonitors.get(peerId);\n    if (qualityMonitor) {\n      qualityMonitor.dispose();\n      this.audioQualityMonitors.delete(peerId);\n    }\n    \n    // Clean up peer connection\n    const peerConnection = this.peerConnections.get(peerId);\n    if (peerConnection) {\n      peerConnection.onicecandidate = null;\n      peerConnection.ontrack = null;\n      peerConnection.onconnectionstatechange = null;\n      \n      // Close connection\n      peerConnection.close();\n      this.peerConnections.delete(peerId);\n    }\n  }\n  \n  /**\n   * Mute or unmute local audio\n   * @param {boolean} muted - Whether to mute audio\n   */\n  setMuted(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        track.enabled = !muted;\n      });\n    }\n  }\n  \n  /**\n   * Check if local audio is muted\n   * @returns {boolean} Whether local audio is muted\n   */\n  isMuted() {\n    if (this.localStream) {\n      const audioTracks = this.localStream.getAudioTracks();\n      if (audioTracks.length > 0) {\n        return !audioTracks[0].enabled;\n      }\n    }\n    return true;\n  }\n  \n  /**\n   * Get current audio level (0-100)\n   * @returns {number} Audio level\n   */\n  getAudioLevel() {\n    if (this.speakingDetector) {\n      return this.speakingDetector.getAudioLevel();\n    }\n    return 0;\n  }\n  \n  /**\n   * Get connection quality for a peer\n   * @param {string} peerId - ID of the peer\n   * @returns {Promise<Object>} Quality metrics\n   */\n  async getConnectionQuality(peerId) {\n    const qualityMonitor = this.audioQualityMonitors.get(peerId);\n    if (qualityMonitor) {\n      return await qualityMonitor.getQualityMetrics();\n    }\n    return { quality: 'unknown', metrics: {} };\n  }\n  \n  /**\n   * Leave the room and clean up all connections\n   */\n  leaveRoom() {\n    // Stop speaking detector\n    if (this.speakingDetector) {\n      this.speakingDetector.dispose();\n      this.speakingDetector = null;\n    }\n    \n    // Clean up all peer connections\n    for (const peerId of this.peerConnections.keys()) {\n      this._cleanupPeerConnection(peerId);\n    }\n    \n    // Stop local stream tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        track.stop();\n      });\n      this.localStream = null;\n    }\n    \n    // Leave room via socket\n    if (this.socket && this.socket.connected) {\n      this.socket.emit('leave', {\n        roomId: this.roomId,\n        userId: this.userId,\n      });\n    }\n    \n    this.roomId = null;\n  }\n  \n  /**\n   * Start a call with a specific peer\n   * @param {string} peerId - ID of the peer to call\n   * @returns {Promise<void>}\n   */\n  async startCall(peerId) {\n    try {\n      // Create peer connection if it doesn't exist\n      let peerConnection = this.peerConnections.get(peerId);\n      if (!peerConnection) {\n        peerConnection = this._createPeerConnection(peerId, true);\n      } else {\n        // If connection exists but we need to initiate a call\n        this._createAndSendOffer(peerId);\n      }\n      \n      return peerConnection;\n    } catch (error) {\n      console.error('Error starting call:', error);\n      if (this.onError) {\n        this.onError('Failed to start call. Please try again.');\n      }\n      throw error;\n    }\n  }\n  \n  /**\n   * Dispose of all resources\n   */\n  dispose() {\n    this.leaveRoom();\n    \n    // Unbind socket events\n    if (this.socket) {\n      this.socket.off('userJoined');\n      this.socket.off('userLeft');\n      this.socket.off('offer');\n      this.socket.off('answer');\n      this.socket.off('iceCandidate');\n      this.socket.off('speaking');\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}